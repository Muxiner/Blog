<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSAPP：BOMB实验</title>
      <link href="2020/12/09/csapp-bomb/"/>
      <url>2020/12/09/csapp-bomb/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h3><p>炸弹实验是<code>CSAPP</code>的第二个实验，涉及到了<code>反汇编</code>、<code>读懂汇编语言</code>、<code>Linux下GDB的使用</code>及<code>C语言</code>，其中的读懂汇编语言是重难点，完整的看懂了一个函数的汇编语言时，炸弹也迎刃而解。</p><p>每个人得到的BOMB都是不一样的，大体上是每种类型的炸弹都有不同的题目，共六个<code>PHASE</code> + 一个<code>SECRET_PHASE</code>, 也就是七个炸弹。具体内容后面再说。每个人的BOMB都不一样，但是大体就那么几个在哪排列组合，所以花时间使用BAIDU GOOGLE的话还是可以找到原题的，但是并没有什么卵用，直接抄的话。按我们老师说就是学术剽窃，就是学术作弊。当然可以借鉴一下，毕竟不认真研究一下汇编，是真的不怎么好做这BOMB实验。最好还是自己慢慢看懂汇编，翻译成原来的C语言代码，再得到密码解除炸弹，这样子的收获才是最大的。</p><p>实验的资料自己都有哦，懂得都懂。  </p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h4><ul><li>逆向工程拆除“二进制炸弹”程序  </li><li>增强对程序机器级表示、汇编语言、调试器和逆向工程等理解。  </li><li>一个“Binary Bombs”（二进制炸弹，简称炸弹）是一个Linux可执行C程序，包含phase1~phase6共6个阶段。  </li><li>炸弹运行各阶段要求输入一个字符串，若输入符合程序预期，该阶段炸弹被“拆除”，否则“爆炸” 。  </li><li>你需要拆除尽可能多的炸弹。  </li></ul><h4 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h4><p>每个炸弹阶段考察机器级语言程序不同方面，难度递增  </p><ul><li>阶段1：字符串比较</li><li>阶段2：循环</li><li>阶段3：条件/分支：含switch语句</li><li>阶段4：递归调用和栈</li><li>阶段5：指针</li><li>阶段6：链表/指针/结构</li><li>隐藏阶段：第4阶段之后附加特定字符串后出现</li></ul><p>好家伙，老师提供的PPT里就直接说明了，以上内容，尤其是隐藏阶段，即SECRET_PHASE，在哪出现和出现的条件。 = =  </p><h4 id="实验技能"><a href="#实验技能" class="headerlink" title="实验技能"></a>实验技能</h4><ul><li>拆弹装备：<ul><li>熟练使用gdb调试器和objdump；</li><li>单步跟踪调试每一阶段的机器代码；</li><li>理解汇编语言代码的行为或作用；</li><li>“推断”拆除炸弹所需的目标字符串。</li><li>在各阶段的开始代码前和引爆炸弹函数前设置断点，便于调试。</li></ul></li><li>实验语言：C语言，at&amp;t汇编语言</li><li>实验环境：32位 linux  </li></ul><h4 id="实验文件说明"><a href="#实验文件说明" class="headerlink" title="实验文件说明"></a>实验文件说明</h4><ul><li>炸弹文件包：（每个人的不一样）</li><li>$tar vxf bomb_2017.tar<ul><li>bomb：   bomb的可执行程序。</li><li>bomb.c：bomb程序的main函数。</li><li>README</li></ul></li><li>bomb：是一个linux下可执行程序，需要0或1个命令行参数<ul><li>不带参数运行，输出欢迎信息后，期待你按行输入                拆弹字符串，错误炸弹引爆退出，正确提示进入下一关。</li><li>带参数运行，从拆弹者的密码文件中读取用户密码</li></ul></li><li>bomb.c：bomb主程序，帮助拆弹者了解代码框架，没有细节</li></ul><h4 id="拆弹方式"><a href="#拆弹方式" class="headerlink" title="拆弹方式"></a>拆弹方式</h4><ul><li>方法1：$./bomb <ul><li>根据提示，逐阶段手工输入拆弹字符串（见演示）</li><li>较为繁琐，重复工作多</li></ul></li></ul><p><img src="/2020/12/09/csapp-bomb/bomb1.png" alt="方法一演示"></p><ul><li>方法2：$./bomb ans.txt     （推荐）<ul><li>ans.txt为拆弹密码文本文件，名字可以自定义<ul><li>文本文件，每个拆弹字符串一行，回车结束，最多7行</li><li>除此之外不要包含任何其它字符</li></ul></li><li>程序会检查每一阶段的拆弹密码字符串来决定炸弹拆除成败。</li></ul></li></ul><p><img src="/2020/12/09/csapp-bomb/bomb2.png" alt="方法二演示">  </p><p>这样子是真的快！ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bomb ans.txt</span><br></pre></td></tr></table></figure><h3 id="开始拆弹"><a href="#开始拆弹" class="headerlink" title="开始拆弹"></a>开始拆弹</h3><p>首先反汇编<code>bomb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump –d bomb &gt; asm.txt</span><br></pre></td></tr></table></figure><p>对bomb进行反汇编并将汇编代码输出到asm.txt中。  </p><p>然后查看汇编文件<code>asm.txt</code>。寻找<code>phase</code>所在的汇编代码段。 </p><h4 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase_1"></a>Phase_1</h4><p>在<code>asm.txt</code>的<code>main</code>函数中找到如下语句<br>这里为<code>phase1</code>函数在<code>main()</code>函数中被调用的位置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">8048a9a:c7 04 24 01 00 00 00 movl   $0x1,(%esp)</span><br><span class="line">8048aa1:e8 ea fd ff ff       call   8048890 &lt;__printf_chk@plt&gt;</span><br><span class="line">8048aa6:c7 04 24 08 00 00 00 movl   $0x8,(%esp)</span><br><span class="line">8048aad:e8 7e fd ff ff       call   8048830 &lt;exit@plt&gt;</span><br><span class="line">8048ab2:e8 7c 06 00 00       call   8049133 &lt;initialize_bomb&gt;</span><br><span class="line">8048ab7:c7 04 24 cc a1 04 08 movl   $0x804a1cc,(%esp)</span><br><span class="line">8048abe:e8 2d fd ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line">8048ac3:c7 04 24 08 a2 04 08 movl   $0x804a208,(%esp)</span><br><span class="line">8048aca:e8 21 fd ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line">8048acf:e8 7d 07 00 00       call   8049251 &lt;read_line&gt;</span><br><span class="line">8048ad4:89 04 24             mov    %eax,(%esp)</span><br><span class="line">8048ad7:e8 b4 00 00 00       call   8048b90 &lt;phase_1&gt;</span><br><span class="line">                                                  //phase_1的位置，往下翻找即可</span><br><span class="line">8048adc:e8 6e 08 00 00       call   804934f &lt;phase_defused&gt;</span><br><span class="line">8048ae1:c7 04 24 34 a2 04 08 movl   $0x804a234,(%esp)</span><br></pre></td></tr></table></figure><p>然后再就是<code>phase_1</code>:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">08048b90 &lt;phase_1&gt;:</span><br><span class="line"> 8048b90:55                   push   %ebp</span><br><span class="line"> 8048b91:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048b93:83 ec 18             sub    $0x18,%esp //开栈</span><br><span class="line"> 8048b96:c7 44 24 04 84 a2 04 movl   $0x804a284,0x4(%esp) </span><br><span class="line">                                           //将0x804a284的内容存放到esp+4的位置</span><br><span class="line"> 8048b9d:08 </span><br><span class="line"> 8048b9e:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line">                                           //esp+8，从调用函数处取第一个参数放到eax寄中</span><br><span class="line"> 8048ba1:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                           //传送到esp寄存器</span><br><span class="line"> 8048ba4:e8 19 05 00 00       call   80490c2 &lt;strings_not_equal&gt;</span><br><span class="line">                                           //入口函数， 判断字符串是否相等（判断esp+4和esp+8的字符串是否相等）</span><br><span class="line"> 8048ba9:85 c0                test   %eax,%eax</span><br><span class="line">                                           //当两个字符串相等时返回eax=0</span><br><span class="line"> 8048bab:74 05                je     8048bb2 &lt;phase_1+0x22&gt;</span><br><span class="line">                                           //是否引爆炸弹的条件（eax=0跳到leave，否则引爆炸弹，因此通关的条件是eax=0）</span><br><span class="line"> 8048bad:e8 25 06 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048bb2:c9                   leave  </span><br><span class="line"> 8048bb3:c3                   ret    </span><br></pre></td></tr></table></figure><p>根据以上分析可知，程序先将输入的参数存放到<code>ebp+8</code>的位置，接着传送到<code>esp</code>中，然后函数在<code>0x804a284</code>这个地址取值，放到<code>esp+8</code>中。最后传送到<code>eax</code>进行比较，如果相等，返回<code>eax = 0</code>，跳到<code>leave</code>结束，不相等则返回<code>1</code>，同时调用引爆炸弹的函数。因此只要查看<code>0x804a284</code>这个地址的内容就能找到密码！用<code>GDB调试工具</code>进行查看：<br><img src="/2020/12/09/csapp-bomb/gdbphase1.png" alt="0x804a284">  </p><p>还可以使用方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objdump --start-address&#x3D;0x804a0fc –s bomb   #方法2</span><br></pre></td></tr></table></figure><p>建议慎用 T T<br><img src="/2020/12/09/csapp-bomb/phase1.1.png"><br>密码是出来了，但是多了一长串的后面地址的内容。</p><p><code>phase_1</code>的密码：  </p><blockquote><p>Public speaking is very easy.  </p></blockquote><p>将其放入<code>ans.txt</code>中再<code>./bomb ans.txt</code>可得：<br><img src="/2020/12/09/csapp-bomb/phase1.png" alt="phase1"> </p><p>一下简要介绍GBD在本次拆炸弹中的使用：</p><h5 id="GDB工具的使用"><a href="#GDB工具的使用" class="headerlink" title="GDB工具的使用"></a>GDB工具的使用</h5><p>terminal输入gdb bomb，即是调试bomb这个程序，显示如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b xxx   //在XX处设置断点</span><br><span class="line">ni      //单步执行机器指令</span><br><span class="line">x/2s    //查看地址中的两个字符串</span><br><span class="line">x/d     //查看地址中的整数</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">GNU gdb (GDB) 7.2-ubuntu</span><br><span class="line">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;i686-linux-gnu&quot;.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class="line">./bomb/bomblab/src/bomb...done.</span><br><span class="line">gdb) b main        #在main函数的开始处设置断点   </span><br><span class="line">Breakpoint 1 at 0x80489a5: file bomb.c, line 45.</span><br><span class="line">(gdb) r                  #从gdb里运行bomb程序</span><br><span class="line">Starting program:./bomb/bomblab/src/bomb </span><br><span class="line">                              # 运行后，暂停在断点1处</span><br><span class="line">Breakpoint 1, main (argc=1, argv=0xbffff3f4) at bomb.c:45</span><br><span class="line">45    if (argc == 1) &#123; </span><br><span class="line">(gdb) ni                #单步执行机器指令</span><br><span class="line">0x080489a845    if (argc == 1) &#123;  </span><br><span class="line">(gdb) ni</span><br><span class="line">46infile = stdin;   #这里可以看到执行到哪一条C语句</span><br><span class="line">(gdb) ni</span><br><span class="line">73    input = read_line();             /* Get input                   */</span><br><span class="line">(gdb) ni                /*如果是命令行输入，这里输入你的拆弹字符串*/</span><br><span class="line">74    phase_1(input);                  /* Run the phase               */</span><br><span class="line">(gdb) x/2s 0x804a284       #查看地址0x804a0fc处两个字符串：</span><br><span class="line">0x804a284:&quot;Public speaking is very easy.&quot;</span><br><span class="line">0x804a2a2:&quot;%d %c %d&quot; </span><br><span class="line">(gdb) q                          #退出gdb               </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Phase_2</span><br><span class="line">可知此次是关于循环的，不多BB直接上汇编：</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">08048bb4 &lt;phase_2&gt;:</span><br><span class="line"> 8048bb4:55                   push   %ebp</span><br><span class="line"> 8048bb5:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048bb7:56                   push   %esi</span><br><span class="line"> 8048bb8:53                   push   %ebx</span><br><span class="line">                                           //esi和ebx为调用者保存寄存器，因为后面的循环用到了者两个寄存器，因此要压栈保存</span><br><span class="line"> 8048bb9:83 ec 30             sub    $0x30,%esp </span><br><span class="line">                                           //esp - 48开栈</span><br><span class="line"> 8048bbc:8d 45 e0             lea    -0x20(%ebp),%eax</span><br><span class="line"> 8048bbf:89 44 24 04          mov    %eax,0x4(%esp)</span><br><span class="line">                                           //以上两句将ebp-32处的地址借助eax传给esp+4处</span><br><span class="line"> 8048bc3:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line"> 8048bc6:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                           //以上两句将ebp+8处的地址传给esp</span><br><span class="line"> 8048bc9:e8 33 06 00 00       call   8049201 &lt;read_six_numbers&gt;</span><br><span class="line">                                           //输入6个数</span><br><span class="line"> 8048bce:83 7d e0 01          cmpl   $0x1,-0x20(%ebp)</span><br><span class="line">                                           //(ebp - 32)- 1 = 0</span><br><span class="line"> 8048bd2:74 1e                je     8048bf2 &lt;phase_2+0x3e&gt;</span><br><span class="line">                                           //引爆炸弹的条件，不为1则引爆炸弹。因此ebp-32处要为1，从前面看，这是存放输入参数的位置</span><br><span class="line"> 8048bd4:e8 fe 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048bd9:eb 17                jmp    8048bf2 &lt;phase_2+0x3e&gt;</span><br><span class="line"></span><br><span class="line"> 8048bdb:8b 43 fc             mov    -0x4(%ebx),%eax</span><br><span class="line"> 8048bde:01 c0                add    %eax,%eax</span><br><span class="line"> 8048be0:39 03                cmp    %eax,(%ebx)</span><br><span class="line">                                           //以上三句将(ebx-4)传给eax，eax = eax*2 </span><br><span class="line">                                           eax - ebx = 0就跳转，反之不为0，引爆炸弹</span><br><span class="line"> 8048be2:74 05                je     8048be9 &lt;phase_2+0x35&gt;</span><br><span class="line"> 8048be4:e8 ee 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line"> 8048be9:83 c3 04             add    $0x4,%ebx</span><br><span class="line">                                           //ebx上移4，ebx+4</span><br><span class="line"> 8048bec:39 f3                cmp    %esi,%ebx</span><br><span class="line">                                           // esi - ebx ！= 0</span><br><span class="line"> 8048bee:75 eb                jne    8048bdb &lt;phase_2+0x27&gt;</span><br><span class="line"> 8048bf0:eb 08                jmp    8048bfa &lt;phase_2+0x46&gt;</span><br><span class="line">                                           //当esi=ebx时跳出循环，反之继续循环。</span><br><span class="line"> 8048bf2:8d 5d e4             lea    -0x1c(%ebp),%ebx</span><br><span class="line">                                           //ebp - 28传给ebx(调用者帧保存)</span><br><span class="line"> 8048bf5:8d 75 f8             lea    -0x8(%ebp),%esi</span><br><span class="line">                                           //ebp - 8 传给esi(调用者帧保存)</span><br><span class="line"> 8048bf8:eb e1                jmp    8048bdb &lt;phase_2+0x27&gt;</span><br><span class="line"></span><br><span class="line"> 8048bfa:83 c4 30             add    $0x30,%esp</span><br><span class="line"> 8048bfd:5b                   pop    %ebx</span><br><span class="line"> 8048bfe:5e                   pop    %esi</span><br><span class="line"> 8048bff:5d                   pop    %ebp</span><br><span class="line"> 8048c00:c3                   ret    </span><br></pre></td></tr></table></figure><p>栈图如下：<br><img src="/2020/12/09/csapp-bomb/phase2.1.png"><br>分析：<br>显然是一个首项为1，公比为2的等比数列。</p><p>第二关密码：</p><blockquote><p>1 2 4 8 16 32</p></blockquote><h4 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase_3"></a>Phase_3</h4><p>可知本关与switch有关，有分支，故而代码较长，解题选一种情况即可（看了才知道的）。<br>继续上汇编代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">08048c01 &lt;phase_3&gt;:</span><br><span class="line"> 8048c01:55                   push   %ebp</span><br><span class="line"> 8048c02:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048c04:83 ec 38             sub    $0x38,%esp</span><br><span class="line">                                           // esp-56开栈</span><br><span class="line"> 8048c07:8d 45 f4             lea    -0xc(%ebp),%eax</span><br><span class="line"> 8048c0a:89 44 24 10          mov    %eax,0x10(%esp)</span><br><span class="line">                                           //ebp-12 借助eax传给esp + 16</span><br><span class="line"> 8048c0e:8d 45 ef             lea    -0x11(%ebp),%eax</span><br><span class="line"> 8048c11:89 44 24 0c          mov    %eax,0xc(%esp)</span><br><span class="line">                                           //ebp-17借助eax传给esp+12</span><br><span class="line"> 8048c15:8d 45 f0             lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048c18:89 44 24 08          mov    %eax,0x8(%esp)</span><br><span class="line">                                           //ebp-16借助eax传给esp+8</span><br><span class="line"> 8048c1c:c7 44 24 04 a2 a2 04 movl   $0x804a2a2,0x4(%esp)</span><br><span class="line">                                           //将0x804a2a2的内容传给esp+8</span><br><span class="line">                                           //GDB查看发现是%d%c%d</span><br><span class="line"> 8048c23:08 </span><br></pre></td></tr></table></figure><p>0x804a2a2这个地址有点熟悉哦，感觉在哪见过——<br><img src="/2020/12/09/csapp-bomb/phase2.1.png"><br>好家伙，查0x804a284的时候就出现0x804a2a2了，还是进入GDB再看看。<br><img src="/2020/12/09/csapp-bomb/phase2.2.png"><br>好家伙，确实是这样，需要我们输入<code>%d %c %d</code>,两个整数，一个字符。（所以这也是这个的原因）</p><blockquote><p>lea    -0x11(%ebp),%eax<br>mov    %eax,0xc(%esp)<br>//ebp-17借助eax传给esp+12</p></blockquote><p>第二个参数只占一个一个字节。（这里之前想了好久。。。。。。）<br>继续看汇编：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">8048c24:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line">8048c27:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                          // ebp-8借助eax传给esp</span><br><span class="line">8048c2a:e8 31 fc ff ff       call   8048860 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">                                          //读入函数，将你输入的参数按指定格式读到相应的地址</span><br><span class="line">8048c2f:83 f8 02             cmp    $0x2,%eax</span><br><span class="line">                                          //eax接受ssacnf函数的返回值，说明sscanf函数的返回值是参数个数，如果大于2跳过炸弹，否则引爆炸弹。</span><br><span class="line">8048c32:7f 05                jg     8048c39 &lt;phase_3+0x38&gt;</span><br><span class="line">8048c34:e8 9e 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">8048c39:83 7d f0 07          cmpl   $0x7,-0x10(%ebp)</span><br><span class="line">8048c3d:0f 87 e9 00 00 00    ja     8048d2c &lt;phase_3+0x12b&gt;</span><br><span class="line">                                          //以上两句说明ebp-16不能超过7，否则就引爆炸弹。</span><br><span class="line">8048c43:8b 45 f0             mov    -0x10(%ebp),%eax</span><br><span class="line">                                          //ebp-16赋给eax</span><br><span class="line">8048c46:ff 24 85 c0 a2 04 08 jmp    *0x804a2c0(,%eax,4)</span><br><span class="line">                                          //间接跳转，跳到*0x804a2c0这个地址，这是第三关的核心代码！</span><br></pre></td></tr></table></figure><p>详细分析：<br>ja : 无符号大于则跳转; 代表ebp-16中的内容只能小于等于7，大于等于0，再看上面的代码易知ebp-16是第一个参数，故设第一个参数为i，再往下看可知：</p><blockquote><p>i = 0, 1, 2, 3, 4, 5, 6, 7</p></blockquote><p>所以就会有8个不同的密码！</p><blockquote><p>-0x10(%ebp),%eax //ebp-16赋给eax</p></blockquote><p>即第一个参数赋给eax。</p><blockquote><p>jmp    *0x804a2c0(,%eax,4)</p></blockquote><p>用GDB查看*0x804a2c0,可知这个指针指向0x8048c4d。即使当i=1的情况。<br>仔细一看发现后面的汇编大体相似，应该就是i取值不同时的不同情况。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8048c4d:b8 6d 00 00 00       mov    $0x6d,%eax</span><br><span class="line">                                          // eax = 0x6d</span><br><span class="line">8048c52:81 7d f4 f0 01 00 00 cmpl   $0x1f0,-0xc(%ebp)</span><br><span class="line">8048c59:0f 84 d7 00 00 00    je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line">                                          // ebp-12 = 0x1f0 跳转，反之爆炸。</span><br><span class="line">8048c5f:e8 73 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048c64:b8 6d 00 00 00       mov    $0x6d,%eax</span><br><span class="line">                                          // eax = 0x6d</span><br><span class="line">8048c69:e9 c8 00 00 00       jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line">                                          </span><br></pre></td></tr></table></figure><p>edp-12是第三个参数，为496</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8048d2c:e8 a6 04 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048d31:b8 77 00 00 00       mov    $0x77,%eax</span><br><span class="line">8048d36:3a 45 ef             cmp    -0x11(%ebp),%al</span><br><span class="line">                                          &#x2F;&#x2F; 比较ebp-17 和 al寄存器中的值，相等结束，反之爆炸。</span><br><span class="line">8048d39:74 05                je     8048d40 &lt;phase_3+0x13f&gt;</span><br><span class="line">8048d3b:e8 97 04 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048d40:c9                   leave  </span><br><span class="line">8048d41:c3                   ret</span><br></pre></td></tr></table></figure><p>al寄存器是eax的低8位，举例</p><blockquote><p>mov eax 12345678h<br>mov al 78h<br>AX是EAX的低16位<br>AH是ax的高8位，而AL是ax的低8位  </p></blockquote><p>差不多这个意思。</p><blockquote><p>cmp    -0x11(%ebp),%al<br>je     8048d40 &lt;phase_3+0x13f&gt;</p></blockquote><p>就是第二个参数等于al中的内容，即上面eax的内容（eax = 0x6d）<br>定义 char B;<br>B是第二个参数，B = 0x6d。<br>查ASCII码表知   B = m。<br><img src="/2020/12/09/csapp-bomb/ASCII.png" alt="ASCII码"></p><p>所以其中一个密码为<br>0 m 496</p><p>以下分析方法同上，就不做重复的分析：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> 8048c6e:b8 6f 00 00 00       mov    $0x6f,%eax</span><br><span class="line"> 8048c73:81 7d f4 5a 01 00 00 cmpl   $0x15a,-0xc(%ebp)</span><br><span class="line"> 8048c7a:0f 84 b6 00 00 00    je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048c80:e8 52 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c85:b8 6f 00 00 00       mov    $0x6f,%eax</span><br><span class="line"> 8048c8a:e9 a7 00 00 00       jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line"> 8048c8f:b8 70 00 00 00       mov    $0x70,%eax</span><br><span class="line"> 8048c94:83 7d f4 64          cmpl   $0x64,-0xc(%ebp)</span><br><span class="line"> 8048c98:0f 84 98 00 00 00    je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048c9e:e8 34 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048ca3:b8 70 00 00 00       mov    $0x70,%eax</span><br><span class="line"> 8048ca8:e9 89 00 00 00       jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line"> 8048cad:b8 68 00 00 00       mov    $0x68,%eax</span><br><span class="line"> 8048cb2:83 7d f4 3d          cmpl   $0x3d,-0xc(%ebp)</span><br><span class="line"> 8048cb6:74 7e                je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048cb8:e8 1a 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cbd:b8 68 00 00 00       mov    $0x68,%eax</span><br><span class="line"> 8048cc2:eb 72                jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line"> 8048cc4:b8 6f 00 00 00       mov    $0x6f,%eax</span><br><span class="line"> 8048cc9:81 7d f4 02 02 00 00 cmpl   $0x202,-0xc(%ebp)</span><br><span class="line"> 8048cd0:74 64                je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048cd2:e8 00 05 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cd7:b8 6f 00 00 00       mov    $0x6f,%eax</span><br><span class="line"> 8048cdc:eb 58                jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line"> 8048cde:b8 6e 00 00 00       mov    $0x6e,%eax</span><br><span class="line"> 8048ce3:81 7d f4 d5 00 00 00 cmpl   $0xd5,-0xc(%ebp)</span><br><span class="line"> 8048cea:74 4a                je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048cec:e8 e6 04 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cf1:b8 6e 00 00 00       mov    $0x6e,%eax</span><br><span class="line"> 8048cf6:eb 3e                jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line"> 8048cf8:b8 74 00 00 00       mov    $0x74,%eax</span><br><span class="line"> 8048cfd:81 7d f4 97 01 00 00 cmpl   $0x197,-0xc(%ebp)</span><br><span class="line"> 8048d04:74 30                je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"> 8048d06:e8 cc 04 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"> 8048d0b:b8 74 00 00 00       mov    $0x74,%eax</span><br><span class="line"> 8048d10:eb 24                jmp    8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line"></span><br><span class="line">8048d12:b8 74 00 00 00       mov    $0x74,%eax</span><br><span class="line">8048d17:81 7d f4 9b 01 00 00 cmpl   $0x19b,-0xc(%ebp)8048d1e:74 16                je     8048d36 &lt;phase_3+0x135&gt;</span><br><span class="line">8048d20:e8 b2 04 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048d25:b8 74 00 00 00       mov    $0x74,%eax</span><br><span class="line">8048d2a:eb 0a                jmp    8048d36 &lt;phase_3+0x135&gt;</span><br></pre></td></tr></table></figure><p>所以第三关密码为：<br>0 m 496<br>1 o 346<br>2 p 100<br>3 h 61<br>4 o 514<br>5 n 213<br>6 t 407<br>7 t 411<br>任选一组即可过关。  </p><h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><p>我们可知phase_4与递归的调用有关，不看不知道，一看吓一跳，递归在汇编里看着就是真的恶心啊。（主要还是自己看不明白（主要还是汇编学的不是很透彻））。<br>不多比比继续直接看代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">08048da4 &lt;phase_4&gt;:</span><br><span class="line"> 8048da4:55                   push   %ebp</span><br><span class="line"> 8048da5:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048da7:83 ec 28             sub    $0x28,%esp</span><br><span class="line">                                           //esp-40开栈</span><br><span class="line"> 8048daa:8d 45 f4             lea    -0xc(%ebp),%eax</span><br><span class="line"> 8048dad:89 44 24 0c          mov    %eax,0xc(%esp)</span><br><span class="line">                                           //ebp-12借助eax传给esp+12</span><br><span class="line"> 8048db1:8d 45 f0             lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048db4:89 44 24 08          mov    %eax,0x8(%esp)</span><br><span class="line">                                           //ebp-16借助eax传给esp+8</span><br><span class="line"> 8048db8:c7 44 24 04 57 a4 04 movl   $0x804a457,0x4(%esp)</span><br><span class="line">                                           //使用GDB查看知需要输入两个整型 %d %d</span><br><span class="line"> 8048dbf:08 </span><br><span class="line"> 8048dc0:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line"> 8048dc3:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                           //ebp+8借助eax传给esp</span><br><span class="line"> 8048dc6:e8 95 fa ff ff       call   8048860 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">                                          </span><br><span class="line"> 8048dcb:83 f8 02             cmp    $0x2,%eax</span><br><span class="line">                                           //判断参数个数是否为2，不为2，爆炸</span><br><span class="line"> 8048dce:75 06                jne    8048dd6 &lt;phase_4+0x32&gt;</span><br><span class="line"></span><br><span class="line"> 8048dd0:83 7d f0 0e          cmpl   $0xe,-0x10(%ebp)</span><br><span class="line">                                           //(ebp-16)-14 &lt;= 0 跳转，反之爆炸</span><br><span class="line">                                           //可知参数一是一个小于等于14的无符号型整数</span><br><span class="line"> 8048dd4:76 05                jbe    8048ddb &lt;phase_4+0x37&gt;</span><br><span class="line"> 8048dd6:e8 fc 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br></pre></td></tr></table></figure><p>设参数一为A， 所以0 &lt;= A &lt;= 14  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8048ddb:c7 44 24 08 0e 00 00 movl   $0xe,0x8(%esp)</span><br><span class="line">                                          //exp+8 = 14</span><br><span class="line">8048de2:00 </span><br><span class="line">8048de3:c7 44 24 04 00 00 00 movl   $0x0,0x4(%esp)</span><br><span class="line">                                          //esp+4 = 0</span><br><span class="line">8048dea:00 </span><br><span class="line">8048deb:8b 45 f0             mov    -0x10(%ebp),%eax</span><br><span class="line">8048dee:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                          // ebp-16赋值给esp(参数1赋给esp)</span><br><span class="line">8048df1:e8 4c ff ff ff       call   8048d42 &lt;func4&gt;//进入递归</span><br></pre></td></tr></table></figure><p>进入递归Func4函数时传入了三个参数，即14，0，A（参数1）。<br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">8048df6:83 f8 06             cmp    $0x6,%eax</span><br><span class="line">                                          //eax是递归函数的返回值且为6，不为6，爆炸。</span><br><span class="line">8048df9:75 06                jne    8048e01 &lt;phase_4+0x5d&gt;</span><br><span class="line">8048dfb:83 7d f4 06          cmpl   $0x6,-0xc(%ebp)</span><br><span class="line">                                          //(ebp-12) - 6 = 0</span><br><span class="line">                                          // ebp-12是参数2，即参数2为6。</span><br><span class="line">                                          // 参数2为6时，结束，反之爆炸。</span><br><span class="line">8048dff:74 05                je     8048e06 &lt;phase_4+0x62&gt;</span><br><span class="line">8048e01:e8 d1 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048e06:c9                   leave  </span><br><span class="line">8048e07:c3                   ret   </span><br></pre></td></tr></table></figure><br> 分析到这里时，我们已经知道了<code>参数1</code>的范围<code>[0, 14]</code>, <code>参数2</code>为<code>6</code>。<br> 其实我们擦不多就可以结束phase4的分析了，差不多可以知道密码了。<br> 我们可以一个一个地带进去试验  即输入<code>i 6</code>,其中<code>i = 0, 1, 2, ..., 14</code>。<br> 最后我们可以得到第四关地密码：<br> <code>6 6  </code></p><p> 但是投机取巧并不好，万一有人问道——递归函数（func4）时怎么样的呢<br> 那么你就回答不上来了。  所以我们还要继续分析，知道全部熟络于心。<br> 但是下面的递归是真的难，真的花时间。  </p><p> 现在我们开始func4的分析：<br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">08048d42 &lt;func4&gt;:</span><br><span class="line"> 8048d42:55                   push   %ebp</span><br><span class="line"> 8048d43:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048d45:56                   push   %esi</span><br><span class="line"> 8048d46:53                   push   %ebx</span><br><span class="line"> 8048d47:83 ec 10             sub    $0x10,%esp</span><br><span class="line">                                           //esp-16开栈</span><br><span class="line"> 8048d4a:8b 55 08             mov    0x8(%ebp),%edx //ebp+8赋给edx，记为参数A</span><br><span class="line"> 8048d4d:8b 45 0c             mov    0xc(%ebp),%eax //ebp+12赋给eax，记为参数B</span><br><span class="line"> 8048d50:8b 5d 10             mov    0x10(%ebp),%ebx //ebp+16赋给ebx，记为参数C</span><br><span class="line">                                           </span><br><span class="line"> 8048d53:89 d9                mov    %ebx,%ecx //ebx赋给ecx</span><br><span class="line"> 8048d55:29 c1                sub    %eax,%ecx //ecx=ecx-eax=C-B</span><br><span class="line"> 8048d57:89 ce                mov    %ecx,%esi //ecx赋给esi</span><br><span class="line"> 8048d59:c1 ee 1f             shr    $0x1f,%esi //esi逻辑右移31位</span><br><span class="line"> 8048d5c:01 f1                add    %esi,%ecx //ecx=ecx+esi</span><br><span class="line"> 8048d5e:d1 f9                sar    %ecx //ecx算术右移1位，就是C/2。</span><br><span class="line"> 8048d60:01 c1                add    %eax,%ecx //ecx=ecx+eax</span><br></pre></td></tr></table></figure><br>上述汇编是对参数进行了算术运算。  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">8048d62:39 d1                cmp    %edx,%ecx</span><br><span class="line">                                          //if(edx &lt;= ecx) 跳转到 8048d7d，否则顺序执行。</span><br><span class="line">8048d64:7e 17                jle    8048d7d &lt;func4+0x3b&gt;</span><br><span class="line"></span><br><span class="line">8048d66:83 e9 01             sub    $0x1,%ecx</span><br><span class="line">                                          // ecx=ecx-1</span><br><span class="line">8048d69:89 4c 24 08          mov    %ecx,0x8(%esp)</span><br><span class="line">8048d6d:89 44 24 04          mov    %eax,0x4(%esp)</span><br><span class="line">8048d71:89 14 24             mov    %edx,(%esp)</span><br><span class="line">                                          //构造func4的参数</span><br><span class="line">8048d74:e8 c9 ff ff ff       call   8048d42 &lt;func4&gt;</span><br><span class="line">                                          //进入递归</span><br><span class="line"></span><br><span class="line">8048d79:01 c0                add    %eax,%eax</span><br><span class="line">                                          //eax=eax+eax</span><br><span class="line">                                          //递归返回值加倍</span><br><span class="line">8048d7b:eb 20                jmp    8048d9d &lt;func4+0x5b&gt;</span><br><span class="line"></span><br><span class="line">8048d7d:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">                                          //eax=0</span><br><span class="line">8048d82:39 d1                cmp    %edx,%ecx</span><br><span class="line">                                          if(edx &gt;= ecx) 递归终止，否则顺序执行。</span><br><span class="line">8048d84:7d 17                jge    8048d9d &lt;func4+0x5b&gt;</span><br><span class="line"></span><br><span class="line">8048d86:89 5c 24 08          mov    %ebx,0x8(%esp)</span><br><span class="line">8048d8a:83 c1 01             add    $0x1,%ecx</span><br><span class="line">                                          //ecx=ecx+1</span><br><span class="line">8048d8d:89 4c 24 04          mov    %ecx,0x4(%esp)</span><br><span class="line">8048d91:89 14 24             mov    %edx,(%esp)</span><br><span class="line">                                          //构造func4的参数</span><br><span class="line">8048d94:e8 a9 ff ff ff       call   8048d42 &lt;func4&gt;</span><br><span class="line">                                          //进入递归</span><br><span class="line">8048d99:8d 44 00 01          lea    0x1(%eax,%eax,1),%eax</span><br><span class="line">                                          //eax=eax*2+1</span><br><span class="line">                                          //递归返回值加倍后加一</span><br><span class="line">8048d9d:83 c4 10             add    $0x10,%esp</span><br><span class="line">8048da0:5b                   pop    %ebx</span><br><span class="line">8048da1:5e                   pop    %esi</span><br><span class="line">8048da2:5d                   pop    %ebp</span><br><span class="line">8048da3:c3                   ret    </span><br></pre></td></tr></table></figure><p>最终可得C语言函数func4：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> ebx, <span class="keyword">int</span> eax, <span class="keyword">int</span> edx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> esi = (ebx - eax) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> ecx = (ebx - eax + esi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ecx = ecx + eax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (edx == ecx)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (edx &gt; ecx)</span><br><span class="line">        <span class="keyword">return</span> func4(ebx, ecx + <span class="number">1</span>, edx) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> func4(ecx - <span class="number">1</span>, eax, edx) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (func4(<span class="number">14</span>, <span class="number">0</span>, i) == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是可得需要输入的第一个参数为<code>6</code>。<br>故phase_4的密码为：<br>6 6  </p><h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">08048e08 &lt;phase_5&gt;:</span><br><span class="line"> 8048e08:55                   push   %ebp</span><br><span class="line"> 8048e09:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048e0b:83 ec 28             sub    $0x28,%esp</span><br><span class="line">                                       //esp-40开栈</span><br><span class="line"></span><br><span class="line"> 8048e0e:8d 45 f4             lea    -0xc(%ebp),%eax</span><br><span class="line"> 8048e11:89 44 24 0c          mov    %eax,0xc(%esp)</span><br><span class="line"> 8048e15:8d 45 f0             lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048e18:89 44 24 08          mov    %eax,0x8(%esp)</span><br><span class="line">                                       //两个参数的赋值，分别为参数1，参数2，可知本关需要输入两个参数</span><br><span class="line"> 8048e1c:c7 44 24 04 57 a4 04 movl   $0x804a457,0x4(%esp)</span><br><span class="line">                                       //使用GDB可知为%d %d，故需要输入两个整型参数</span><br><span class="line"> 8048e23:08 </span><br><span class="line"></span><br><span class="line"> 8048e24:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line"> 8048e27:89 04 24             mov    %eax,(%esp)</span><br><span class="line"> 8048e2a:e8 31 fa ff ff       call   8048860 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 8048e2f:83 f8 01             cmp    $0x1,%eax</span><br><span class="line"> 8048e32:7f 05                jg     8048e39 &lt;phase_5+0x31&gt;</span><br><span class="line"> 8048e34:e8 9e 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">                                       //这一段的意思就是（前几关说过）</span><br><span class="line">                                       //需要输入大于一个的参数个数，否则爆炸</span><br><span class="line"> 8048e39:8b 45 f0             mov    -0x10(%ebp),%eax</span><br><span class="line">                                       //参数1赋给eax</span><br><span class="line"> 8048e3c:83 e0 0f             and    $0xf,%eax</span><br><span class="line">                                       //按位与操作，即eax = eax &amp; 0xf</span><br><span class="line">                                       //按位与后eax 必然小于等于 0x0000 000f</span><br><span class="line"> 8048e3f:89 45 f0             mov    %eax,-0x10(%ebp)</span><br><span class="line">                                       //eax 赋给ebp-16</span><br><span class="line"> 8048e42:83 f8 0f             cmp    $0xf,%eax</span><br><span class="line">                                       //if ((ebp-16) - 15 == 0) 爆炸，否则顺序执行。</span><br><span class="line">                                       //故经过按位与和比较后可知参数1小于15</span><br><span class="line">                                       </span><br><span class="line"> 8048e45:74 28                je     8048e6f &lt;phase_5+0x67&gt;</span><br><span class="line"></span><br><span class="line"> 8048e47:b9 00 00 00 00       mov    $0x0,%ecx</span><br><span class="line"> 8048e4c:ba 00 00 00 00       mov    $0x0,%edx</span><br><span class="line"> 8048e51:83 c2 01             add    $0x1,%edx</span><br><span class="line">                                       //令ecx = 0; edx = 0;</span><br><span class="line">                                       // edx += 1;循环的次数</span><br><span class="line"> 8048e54:8b 04 85 e0 a2 04 08 mov    0x804a2e0(,%eax,4),%eax</span><br><span class="line">                                       //使用GDB知0x804a2e0为一维数组的首地址</span><br><span class="line">                                       //操作为 eax = array[eax]</span><br><span class="line">                                       //首次的eax = 输入的参数一</span><br></pre></td></tr></table></figure><p>经GDB得数组为<code>array[16]=&#123;10,2,14,7,8,12,15,11,0,4,1,13,3,9,6,5&#125;</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8048e5b:01 c1                add    %eax,%ecx</span><br><span class="line">                                      //ecx = ecx + array[eax]</span><br><span class="line">8048e5d:83 f8 0f             cmp    $0xf,%eax</span><br><span class="line">                                      //当eax!=15时继续循环，否则跳出循环。</span><br><span class="line">                                      //跳出循环时eax=15</span><br><span class="line">8048e60:75 ef                jne    8048e51 &lt;phase_5+0x49&gt;</span><br><span class="line"></span><br><span class="line">8048e62:89 45 f0             mov    %eax,-0x10(%ebp)</span><br><span class="line">                                      //(ebp-16)=eax</span><br><span class="line">8048e65:83 fa 0f             cmp    $0xf,%edx</span><br><span class="line">                                      //当循环次数小于15次时顺序执行，否则爆炸。</span><br><span class="line">8048e68:75 05                jne    8048e6f &lt;phase_5+0x67&gt;</span><br><span class="line">8048e6a:3b 4d f4             cmp    -0xc(%ebp),%ecx</span><br><span class="line">                                      //if (参数2 == ecx) 结束，否则爆炸。</span><br><span class="line">8048e6d:74 05                je     8048e74 &lt;phase_5+0x6c&gt;</span><br><span class="line">8048e6f:e8 63 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">8048e74:c9                   leave  </span><br><span class="line">8048e75:c3                   ret </span><br></pre></td></tr></table></figure><p> 分析：<br> 分析得参数2 = 循环时数组元素的和，即sum += array[eax]，开始进行循环时 eax = array[参数1]，循环时eax的取值为 0 - 14，循环结束时 eax = 15，15是读取数组得来的。想要知道参数1的值就需要逆向推理求sum的过程，由<code>0x804a2e0(,%eax,4),%eax</code>可得也就是<code>eax=array[eax]</code>，所以就是当eax=15是逆向运算，直到eax为参数1即可结束，参数2也是循环过程中所得array[eax]的和。<br> 逆向过程：</p><blockquote><p>array[6] = 15;<br>array[14] = 6;<br>array[2] = 14;<br>array[1] = 2;<br>array[10] = 1;<br>array[0] = 10;<br>array[8] = 0;<br>array[4] = 8;<br>array[9] = 4;<br>array[13] = 9;<br>array[11] = 13;<br>array[7] = 11;<br>array[3] = 7;<br>array[12] = 3;<br>以上时循环时的变化<br>array[参数1] = 12;<br>看数组知array[5] = 12 所以参数1 = 5</p></blockquote><p>所以参数2为上述数组元素之和 = 115，参数1 = 5。<br>phase_5密码：<br>5 115  </p><h4 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h4><p>phase_6是一个关于链表的关卡，需要输入6个数字。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">08048e76 &lt;phase_6&gt;:</span><br><span class="line"> 8048e76:55                   push   %ebp</span><br><span class="line"> 8048e77:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048e79:56                   push   %esi</span><br><span class="line"> 8048e7a:53                   push   %ebx</span><br><span class="line">                                       ////以上两个为调用者保存寄存器，后面的循环用到，故压栈保存(寄存器数量有限，要将原来的状态保存，因为要复原）</span><br><span class="line"> 8048e7b:83 ec 40             sub    $0x40,%esp</span><br><span class="line">                                       //esp-64开栈</span><br><span class="line"> 8048e7e:8d 45 c8             lea    -0x38(%ebp),%eax</span><br><span class="line"> 8048e81:89 44 24 04          mov    %eax,0x4(%esp)</span><br><span class="line">                                       //ebp-56借助eax传给esp+4</span><br><span class="line"> 8048e85:8b 45 08             mov    0x8(%ebp),%eax</span><br><span class="line"> 8048e88:89 04 24             mov    %eax,(%esp)</span><br><span class="line">                                       //ebp+8 借助eax传给esp</span><br><span class="line"> 8048e8b:e8 71 03 00 00       call   8049201 &lt;read_six_numbers&gt;</span><br><span class="line">                                       ////读入6个数</span><br><span class="line"></span><br><span class="line"> 8048e90:be 00 00 00 00       mov    $0x0,%esi //清零</span><br><span class="line"> 8048e95:8b 44 b5 c8          mov    -0x38(%ebp,%esi,4),%eax</span><br><span class="line">                                       // eax = (ebp-64) + 4*esi</span><br><span class="line">                                       //当前esi=0，亦即把ebp-64赋给eax，对于不同的esi，就是从ebp-64向上找第esi个数赋给eax。</span><br><span class="line"> 8048e99:83 e8 01             sub    $0x1,%eax //eax -= 1</span><br><span class="line"> 8048e9c:83 f8 05             cmp    $0x5,%eax  </span><br><span class="line">                                       //if (5 &gt;= eax-1) 跳转，否则爆炸</span><br><span class="line">                                       //jbe是无符号数操作，故推知eax的范围为1-6</span><br><span class="line"> 8048e9f:76 05                jbe    8048ea6 &lt;phase_6+0x30&gt;</span><br><span class="line"> 8048ea1:e8 31 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line"> 8048ea6:83 c6 01             add    $0x1,%esi </span><br><span class="line">                                       //esi += 1;</span><br><span class="line">                                       //(取第二个数）</span><br><span class="line"> 8048ea9:83 fe 06             cmp    $0x6,%esi </span><br><span class="line">                                       //if (esi - 6 != 0) 跳转，否则顺序执行 </span><br><span class="line">                                       //判断取的数是否超过6个，若大于6个引爆炸弹。从而推知循环结束的条件是esi=6。</span><br><span class="line"> 8048eac:75 07                jne    8048eb5 &lt;phase_6+0x3f&gt;</span><br><span class="line"> 8048eae:bb 00 00 00 00       mov    $0x0,%ebx //ebx = 0</span><br><span class="line"> 8048eb3:eb 3a                jmp    8048eef &lt;phase_6+0x79&gt;</span><br><span class="line"></span><br><span class="line"> 8048eb5:89 f3                mov    %esi,%ebx // ebx = esi</span><br><span class="line"> 8048eb7:8b 44 9d c8          mov    -0x38(%ebp,%ebx,4),%eax</span><br><span class="line">                                       //eax = (ebp-64) + 4*ebx</span><br><span class="line"> 8048ebb:39 44 b5 c4          cmp    %eax,-0x3c(%ebp,%esi,4)</span><br><span class="line">                                       // if (eax - ((ebx-64) + 4*esi)!=0)跳转，否则爆炸</span><br><span class="line"> 8048ebf:75 05                jne    8048ec6 &lt;phase_6+0x50&gt;</span><br><span class="line"> 8048ec1:e8 11 03 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line"> 8048ec6:83 c3 01             add    $0x1,%ebx //ebx+=1</span><br><span class="line"> 8048ec9:83 fb 05             cmp    $0x5,%ebx //if (5 &lt;= ebx) 跳转，否则顺序执行</span><br><span class="line"> 8048ecc:7e e9                jle    8048eb7 &lt;phase_6+0x41&gt;</span><br><span class="line"></span><br><span class="line"> 8048ece:66 90                xchg   %ax,%ax //交换16位寄存器中的内容</span><br><span class="line"> 8048ed0:eb c3                jmp    8048e95 &lt;phase_6+0x1f&gt;</span><br><span class="line"></span><br><span class="line"> 8048ed2:8b 52 08             mov    0x8(%edx),%edx // edx+8赋给edx</span><br><span class="line"> 8048ed5:83 c0 01             add    $0x1,%eax //eax += 1</span><br><span class="line"> 8048ed8:39 c8             p-&gt;  cmp    %ecx,%eax //if (ecx - eax != 0) 跳转，否则顺序执行</span><br><span class="line"> 8048eda:75 f6                jne    8048ed2 &lt;phase_6+0x5c&gt;</span><br><span class="line"> 8048edc:eb 05                jmp    8048ee3 &lt;phase_6+0x6d&gt;</span><br><span class="line"></span><br><span class="line"> 8048ede:ba 3c c1 04 08       mov    $0x804c13c,%edx</span><br><span class="line">                                       //0x804c13c中的内容赋给edx</span><br><span class="line">                                       //用GDB查看发现它是链表表头的首地址，推知第六关是对链表进行操作</span><br><span class="line"> 8048ee3:89 54 b5 e0          mov    %edx,-0x20(%ebp,%esi,4)</span><br><span class="line">                                       //（ebp-32）+ sei*4 = edx</span><br><span class="line"> 8048ee7:83 c3 01             add    $0x1,%ebx //ebx+=1</span><br><span class="line"> 8048eea:83 fb 06             cmp    $0x6,%ebx //ebx = 6跳转，否则顺序执行</span><br><span class="line"> 8048eed:74 17                je     8048f06 &lt;phase_6+0x90&gt;</span><br><span class="line"></span><br><span class="line"> 8048eef:89 de                mov    %ebx,%esi //ebx赋给esi</span><br><span class="line"> 8048ef1:8b 4c 9d c8          mov    -0x38(%ebp,%ebx,4),%ecx </span><br><span class="line">                                       //ecx=(ebp-64)+4*ebx</span><br><span class="line"> 8048ef5:83 f9 01             cmp    $0x1,%ecx</span><br><span class="line">                                       //if(1&lt;=ecx)跳转，否则顺序执行</span><br><span class="line"> 8048ef8:7e e4                jle    8048ede &lt;phase_6+0x68&gt;</span><br><span class="line"></span><br><span class="line"> 8048efa:b8 01 00 00 00       mov    $0x1,%eax // eax=1</span><br><span class="line"> 8048eff:ba 3c c1 04 08       mov    $0x804c13c,%edx </span><br><span class="line">                                       //0x804c13c中的值赋给edx</span><br><span class="line">                                       //用GDB查看发现它是链表表头的首地址，推知第六关是对链表进行操作</span><br><span class="line"> 8048f04:eb cc                jmp    8048ed2 &lt;phase_6+0x5c&gt;</span><br><span class="line"></span><br><span class="line"> 8048f06:8b 5d e0             mov    -0x20(%ebp),%ebx </span><br><span class="line">                                       //ebp-32赋给ebx</span><br><span class="line"> 8048f09:8d 45 e4             lea    -0x1c(%ebp),%eax</span><br><span class="line">                                       //ebp-28赋给eax</span><br><span class="line"> 8048f0c:8d 75 f8             lea    -0x8(%ebp),%esi</span><br><span class="line">                                       //ebp-8赋给esi</span><br><span class="line"> 8048f0f:89 d9                mov    %ebx,%ecx  </span><br><span class="line">                                       //ebx赋给ecx</span><br><span class="line"> 8048f11:8b 10                mov    (%eax),%edx</span><br><span class="line">                                       //edx = eax中的内容</span><br><span class="line"> 8048f13:89 51 08             mov    %edx,0x8(%ecx) </span><br><span class="line">                                       //edx赋给ecx+8</span><br><span class="line"> 8048f16:83 c0 04             add    $0x4,%eax //eax += 4</span><br><span class="line"> 8048f19:39 f0                cmp    %esi,%eax </span><br><span class="line">                                       // esi = eax跳转，否则顺序执行</span><br><span class="line"> 8048f1b:74 04                je     8048f21 &lt;phase_6+0xab&gt;</span><br><span class="line"></span><br><span class="line"> 8048f1d:89 d1                mov    %edx,%ecx//edx赋给ecx</span><br><span class="line"> 8048f1f:eb f0                jmp    8048f11 &lt;phase_6+0x9b&gt;</span><br><span class="line"> 8048f21:c7 42 08 00 00 00 00 movl   $0x0,0x8(%edx)</span><br><span class="line">                                       //edx+8=0</span><br><span class="line"> 8048f28:be 05 00 00 00       mov    $0x5,%esi</span><br><span class="line">                                       //esi=5</span><br><span class="line"> 8048f2d:8b 43 08             mov    0x8(%ebx),%eax</span><br><span class="line">                                       //ebx+8赋给eax</span><br><span class="line"> 8048f30:8b 00                mov    (%eax),%eax</span><br><span class="line">                                       //eax = eax中的内容</span><br><span class="line"> 8048f32:39 03                cmp    %eax,(%ebx)</span><br><span class="line">                                       // eax &lt;= ebx中的内容 跳转，否则爆炸</span><br><span class="line"> 8048f34:7e 05                jle    8048f3b &lt;phase_6+0xc5&gt;</span><br><span class="line"> 8048f36:e8 9c 02 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line"> 8048f3b:8b 5b 08             mov    0x8(%ebx),%ebx</span><br><span class="line">                                       //ebx+8 赋给ebx</span><br><span class="line"> 8048f3e:83 ee 01             sub    $0x1,%esi //esi-1 &gt; 0跳回到循环中</span><br><span class="line"> 8048f41:75 ea                jne    8048f2d &lt;phase_6+0xb7&gt;</span><br><span class="line"> 8048f43:83 c4 40             add    $0x40,%esp</span><br><span class="line"> 8048f46:5b                   pop    %ebx</span><br><span class="line"> 8048f47:5e                   pop    %esi</span><br><span class="line"> 8048f48:5d                   pop    %ebp</span><br><span class="line"> 8048f49:c3                   ret    </span><br></pre></td></tr></table></figure><p> 将上面分析得<br> 用GDB查看链表中的内容是（链表首地址是0x804c13c,下一个链表地址是上一个链表的地址+12）<br> <img src="/2020/12/09/csapp-bomb/phase6.png" alt="查看连边内容"></p><blockquote><p>1 0x146<br>2 0x2dc<br>3 0x2f7<br>4 0x0a3<br>5 0x26c<br>6 0x225</p></blockquote><p>从小到大排序得  </p><blockquote><p>4 0x0a3<br>1 0x14f<br>6 0x225<br>5 0x26c<br>2 0x2dc<br>3 0x2fc</p></blockquote><p>故phase_6得密码为<br>4 1 6 5 2 3  </p><h4 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h4><p>由于老师、助教提供的实验、资料，他们在介绍实验的PPT里说明了——还有这个<code>secret_phase</code>关卡，也说明了——进入第七关需要在第四关后面输入一个字符串。<br>所以减少了的工作，但是我们还是要明白为什么是这样。  （还是实验前我并没有认真看PPT或者是我忘记了提示过还有个隐藏关卡，所以做到phase_6时，看着对应的汇编代码发现下面还有个<code>secret_phase</code>）  </p><p>当我们发现了还有个隐藏关卡时，发现了第一个问题——怎么进入<code>secret_phase</code>，毕竟输入完前六关的密码时，炸弹就全部解开了，没给我们输入什么的机会。所以该怎么进入呢。  </p><p>前六个都是在Main函数中顺序排好的，那我们就去看看main函数对应汇编代码会不会有线索。然而并没有发现与<code>secret_phase</code>有关的内容，但是发现每个phase_x后都有一个<code>phase_defused</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call   xxxxxxx &lt;phase_x&gt;</span><br><span class="line">call   xxxxxxx &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure><p>那么能否进入隐藏关卡是否与其有关呢。于是在查看<code>phase_defused</code>的汇编代码，发现<code>80493c9:    e8 cf fb ff ff           call   8048f9d &lt;secret_phase&gt;</code>，这不就出现了嘛，那就看看里面是什么意思。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0804934f &lt;phase_defused&gt;:</span><br><span class="line"> 804934f:55                   push   %ebp</span><br><span class="line"> 8049350:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8049352:81 ec 88 00 00 00    sub    $0x88,%esp</span><br><span class="line">                                       //esp-128开栈</span><br><span class="line"> 8049358:65 a1 14 00 00 00    mov    %gs:0x14,%eax</span><br></pre></td></tr></table></figure><p> 这意味着从地址gs：0x14的内存中读取4个字节到eax。 gs是一个段寄存器。最有可能的是线程本地存储(AKA TLS)通过该寄存器引用。(百度的，我不懂，搜索了很多，还是没怎么看明白%gs的意思，故而找了一个感觉对的)<br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">804935e:89 45 f4             mov    %eax,-0xc(%ebp) //ebp-12 = eax</span><br><span class="line">8049361:31 c0                xor    %eax,%eax //eax异或运算</span><br><span class="line">8049363:83 3d c8 c3 04 08 06 cmpl   $0x6,0x804c3c8 </span><br><span class="line">                                      // 0x804c3c8 与 6比较</span><br><span class="line">                                      // 经GDB查看后发现0x804c3c8指向&lt;num_input_strings&gt;:&quot;\005&quot;</span><br><span class="line">                                      // 其中&quot;\005&quot;是调试时处于phase_5得到的值x</span><br><span class="line">                                      // 在不同得phase阶段查此地址会得到不同的&quot;\00x&quot;,x取决于第几个</span><br><span class="line">                                      // 所以 这一行是判断密码输入的次数是否 = 6</span><br><span class="line">804936a:75 6e                jne    80493da &lt;phase_defused+0x8b&gt;</span><br><span class="line">804936c:8d 45 a4             lea    -0x5c(%ebp),%eax </span><br><span class="line">804936f:89 44 24 10          mov    %eax,0x10(%esp) </span><br><span class="line">                                                      // esp+16 = ebp - 92</span><br><span class="line">8049373:8d 45 a0             lea    -0x60(%ebp),%eax</span><br><span class="line">8049376:89 44 24 0c          mov    %eax,0xc(%esp) </span><br><span class="line">                                                      // esp+12 = ebp- 96</span><br><span class="line">804937a:8d 45 9c             lea    -0x64(%ebp),%eax</span><br><span class="line">804937d:89 44 24 08          mov    %eax,0x8(%esp) </span><br><span class="line">                                                     // esp+8 = ebp -100</span><br><span class="line">                                      </span><br><span class="line">8049381:c7 44 24 04 b1 a4 04 movl   $0x804a4b1,0x4(%esp)</span><br><span class="line">                                      // GDB查看得 &quot;%d %d %s&quot;</span><br><span class="line">                                      // 表示需要如此输入，经提示，我们知道了在第四关以这样得格式输入。</span><br><span class="line">8049388:08 </span><br><span class="line">8049389:c7 04 24 d0 c4 04 08 movl   $0x804c4d0,(%esp)</span><br><span class="line">                                      // 得 &lt;input_strings + 240&gt; : &quot;6 6&quot; (有点熟悉)</span><br><span class="line">                                      </span><br><span class="line">8049390:e8 cb f4 ff ff       call   8048860 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">8049395:83 f8 03             cmp    $0x3,%eax </span><br><span class="line">                                      // 如果返回的输入个数不等于三跳转至80493ce，否则顺序执行</span><br><span class="line">8049398:75 34                jne    80493ce &lt;phase_defused+0x7f&gt;</span><br><span class="line">804939a:c7 44 24 04 ba a4 04 movl   $0x804a4ba,0x4(%esp)</span><br><span class="line">                                      // 易知地址中为&quot;DrEvil&quot;</span><br><span class="line">                                      // 不会是进入的密码呢，再往下看看</span><br><span class="line">80493a1:08 </span><br><span class="line">80493a2:8d 45 a4             lea    -0x5c(%ebp),%eax</span><br><span class="line">80493a5:89 04 24             mov    %eax,(%esp) //esp=ebp-92</span><br><span class="line">80493a8:e8 15 fd ff ff       call   80490c2 &lt;strings_not_equal&gt;</span><br><span class="line">                                      // 字符比较</span><br><span class="line">80493ad:85 c0                test   %eax,%eax //应该是判断输入的字符是否为&quot;DrEvil&quot;</span><br><span class="line">80493af:75 1d                jne    80493ce &lt;phase_defused+0x7f&gt;</span><br><span class="line">80493b1:c7 04 24 80 a3 04 08 movl   $0x804a380,(%esp) </span><br><span class="line">                                      </span><br><span class="line">80493b8:e8 33 f4 ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line">80493bd:c7 04 24 a8 a3 04 08 movl   $0x804a3a8,(%esp)</span><br><span class="line"></span><br><span class="line">80493c4:e8 27 f4 ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line">80493c9:e8 cf fb ff ff       call   8048f9d &lt;secret_phase&gt;</span><br><span class="line">                                      //以上就是发现secret_phase需要进行得操作</span><br><span class="line">80493ce:c7 04 24 e0 a3 04 08 movl   $0x804a3e0,(%esp)</span><br><span class="line">80493d5:e8 16 f4 ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line">80493da:8b 45 f4             mov    -0xc(%ebp),%eax</span><br><span class="line">80493dd:65 33 05 14 00 00 00 xor    %gs:0x14,%eax</span><br><span class="line">80493e4:74 05                je     80493eb &lt;phase_defused+0x9c&gt;</span><br><span class="line">80493e6:e8 d5 f3 ff ff       call   80487c0 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">80493eb:c9                   leave  </span><br><span class="line">80493ec:8d 74 26 00          lea    0x0(%esi,%eiz,1),%esi</span><br><span class="line">80493f0:c3                   ret    </span><br><span class="line">80493f1:66 90                xchg   %ax,%ax</span><br><span class="line">80493f3:66 90                xchg   %ax,%ax</span><br><span class="line">80493f5:66 90                xchg   %ax,%ax</span><br><span class="line">80493f7:66 90                xchg   %ax,%ax</span><br><span class="line">80493f9:66 90                xchg   %ax,%ax</span><br><span class="line">80493fb:66 90                xchg   %ax,%ax</span><br><span class="line">80493fd:66 90                xchg   %ax,%ax</span><br><span class="line">80493ff:90                   nop</span><br></pre></td></tr></table></figure><br>上面几个地址中存在的值如图<br><img src="/2020/12/09/csapp-bomb/findphase.png">  </p><p>经分析可知，secret_phase的进入需要我们成功解除了前六个炸弹后并在第四关以”%d %d %s”的格式输入”6 6 DrEvil”。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">08048f9d &lt;secret_phase&gt;:</span><br><span class="line"> 8048f9d:55                   push   %ebp</span><br><span class="line"> 8048f9e:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048fa0:53                   push   %ebx</span><br><span class="line"> 8048fa1:83 ec 14             sub    $0x14,%esp//开栈</span><br><span class="line"> 8048fa4:e8 a8 02 00 00       call   8049251 &lt;read_line&gt;</span><br><span class="line"> 8048fa9:c7 44 24 08 0a 00 00 movl   $0xa,0x8(%esp) //esp+8 = 10</span><br><span class="line"> 8048fb0:00 </span><br><span class="line"> 8048fb1:c7 44 24 04 00 00 00 movl   $0x0,0x4(%esp) //esp+4=0</span><br><span class="line"> 8048fb8:00 </span><br><span class="line"> 8048fb9:89 04 24             mov    %eax,(%esp) </span><br><span class="line"> 8048fbc:e8 0f f9 ff ff       call   80488d0 &lt;strtol@plt&gt;</span><br><span class="line"> 8048fc1:89 c3                mov    %eax,%ebx</span><br><span class="line"> 8048fc3:8d 40 ff             lea    -0x1(%eax),%eax</span><br><span class="line"> 8048fc6:3d e8 03 00 00       cmp    $0x3e8,%eax //if 0x3e8 &lt;= eax,跳转，否则爆炸</span><br><span class="line"> 8048fcb:76 05                jbe    8048fd2 &lt;secret_phase+0x35&gt;</span><br><span class="line"> 8048fcd:e8 05 02 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line"> 8048fd2:89 5c 24 04          mov    %ebx,0x4(%esp)</span><br><span class="line">                                       //ebx中值为输入的参数</span><br><span class="line"> 8048fd6:c7 04 24 88 c0 04 08 movl   $0x804c088,(%esp)</span><br><span class="line">                                       //进入递归的参数</span><br><span class="line"> 8048fdd:e8 68 ff ff ff       call   8048f4a &lt;fun7&gt;</span><br><span class="line"> 8048fe2:83 f8 05             cmp    $0x5,%eax </span><br><span class="line"> 8048fe5:74 05                je     8048fec &lt;secret_phase+0x4f&gt;</span><br><span class="line"> 8048fe7:e8 eb 01 00 00       call   80491d7 &lt;explode_bomb&gt;</span><br><span class="line">                                       //只有当递归的返回值等于5时，不引爆炸弹</span><br><span class="line"> 8048fec:c7 04 24 20 a3 04 08 movl   $0x804a320,(%esp)</span><br><span class="line"> 8048ff3:e8 f8 f7 ff ff       call   80487f0 &lt;puts@plt&gt;</span><br><span class="line"> 8048ff8:e8 52 03 00 00       call   804934f &lt;phase_defused&gt;</span><br><span class="line"> 8048ffd:83 c4 14             add    $0x14,%esp</span><br><span class="line"> 8049000:5b                   pop    %ebx</span><br><span class="line"> 8049001:5d                   pop    %ebp</span><br><span class="line"> 8049002:c3                   ret    </span><br><span class="line"> 8049003:66 90                xchg   %ax,%ax</span><br><span class="line"> 8049005:66 90                xchg   %ax,%ax</span><br><span class="line"> 8049007:66 90                xchg   %ax,%ax</span><br><span class="line"> 8049009:66 90                xchg   %ax,%ax</span><br><span class="line"> 804900b:66 90                xchg   %ax,%ax</span><br><span class="line"> 804900d:66 90                xchg   %ax,%ax</span><br><span class="line"> 804900f:90                   nop</span><br></pre></td></tr></table></figure><p>分析得secret_phase需要我们输入一个值，该值与0x804c088中的值一起进入递归函数，需使得递归返回值 = 5。  </p><p>分析Func7 ：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">08048f4a &lt;fun7&gt;:</span><br><span class="line"> 8048f4a:55                   push   %ebp</span><br><span class="line"> 8048f4b:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048f4d:53                   push   %ebx</span><br><span class="line"> 8048f4e:83 ec 14             sub    $0x14,%esp</span><br><span class="line"> 8048f51:8b 55 08             mov    0x8(%ebp),%edx //最开始是0x804c088中的值，记作参数one</span><br><span class="line"> 8048f54:8b 4d 0c             mov    0xc(%ebp),%ecx //最开始是我们需要的参数，记作参数two</span><br><span class="line"> 8048f57:85 d2                test   %edx,%edx //edx为0 返回-1</span><br><span class="line"> 8048f59:74 37                je     8048f92 &lt;fun7+0x48&gt;</span><br><span class="line">------------------</span><br><span class="line"> 8048f5b:8b 1a                mov    (%edx),%ebx //ebx = *edx</span><br><span class="line"> 8048f5d:39 cb                cmp    %ecx,%ebx //if ecx &lt;= ebx 跳转</span><br><span class="line"> 8048f5f:7e 13                jle    8048f74 &lt;fun7+0x2a&gt; </span><br><span class="line"> 8048f61:89 4c 24 04          mov    %ecx,0x4(%esp)</span><br><span class="line"> 8048f65:8b 42 04             mov    0x4(%edx),%eax</span><br><span class="line"> 8048f68:89 04 24             mov    %eax,(%esp)//(edx+4, ecx)两个参数进入递归</span><br><span class="line"> 8048f6b:e8 da ff ff ff       call   8048f4a &lt;fun7&gt;</span><br><span class="line"> 8048f70:01 c0                add    %eax,%eax//返回值=递归返回值*2</span><br><span class="line"> 8048f72:eb 23                jmp    8048f97 &lt;fun7+0x4d&gt;</span><br><span class="line"> ------------------</span><br><span class="line"> 8048f74:b8 00 00 00 00       mov    $0x0,%eax //eax = 0</span><br><span class="line"> 8048f79:39 cb                cmp    %ecx,%ebx </span><br><span class="line"> 8048f7b:74 1a                je     8048f97 &lt;fun7+0x4d&gt; </span><br><span class="line">                                       //if ecx == ebx 结束递归</span><br><span class="line"> 8048f7d:89 4c 24 04          mov    %ecx,0x4(%esp)</span><br><span class="line"> 8048f81:8b 42 08             mov    0x8(%edx),%eax</span><br><span class="line"> 8048f84:89 04 24             mov    %eax,(%esp) //(*(edx+8),ecx)两个参数进入递归</span><br><span class="line"> 8048f87:e8 be ff ff ff       call   8048f4a &lt;fun7&gt;</span><br><span class="line"> 8048f8c:8d 44 00 01          lea    0x1(%eax,%eax,1),%eax</span><br><span class="line">                                       // 返回值 = 递归返回值*2 + 1</span><br><span class="line"> 8048f90:eb 05                jmp    8048f97 &lt;fun7+0x4d&gt;</span><br><span class="line">--------------------</span><br><span class="line"> 8048f92:b8 ff ff ff ff       mov    $0xffffffff,%eax</span><br><span class="line"> 8048f97:83 c4 14             add    $0x14,%esp</span><br><span class="line"> 8048f9a:5b                   pop    %ebx</span><br><span class="line"> 8048f9b:5d                   pop    %ebp</span><br><span class="line"> 8048f9c:c3                   ret    </span><br></pre></td></tr></table></figure><p>进行一波困难的逆向得Func7的C语言代码:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func7</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (*a &gt; b)</span><br><span class="line">    <span class="keyword">if</span> (*a == b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        result = func7(*(a + <span class="number">8</span>), b);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * result + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      result = func7(*(a + <span class="number">4</span>), b);  </span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span> * result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于最后的返回值是5，根据函数的结构可以想到这样的结构：</p><blockquote><p>a * 2 + 1 = 5 ————&gt; b * 2 = a ————&gt; c * 2 + 1 = b ————&gt; c = 0  </p></blockquote><p>即*a、b的关系为  </p><blockquote><p>*a &lt; b ————&gt; *a &gt; b ————&gt; *a &lt; b————&gt; *a == b</p></blockquote><p>所以一共递归</p><blockquote><p>*a – b &gt; 0<br>*a – b &lt; 0<br>*a – b &gt; 0<br>*a – b == 0</p></blockquote><p>用GDB查看<code>0x804c088</code>后得到</p><ol><li><p><code>0x804c088 = 0x24</code>，之后在<code>*a - b &lt; 0 (0x24 – b &lt; 0)</code>的分支中<code>*(a + 8)= 0x804c090</code>，所以<code>func7(0x804c090, b)</code>。</p></li><li><p><code>*0x804c090 = 0x32</code>，<code>*a - b &gt; 0 (0x32 - b &gt; 0)</code>，递归<code>fun7(*(0x804c090 + 4) = 0x804c094, b)</code>。</p></li><li><p><code>*0x804c094 = 0x2d</code>，<code>*a - b &lt; 0 (0x2d - b &lt; 0)</code>，<code>fun7(*(0x804c094 + 8) = 0x804c09c, b)</code>。</p></li><li><p><code>*0x804c09c = 0x2f</code>，<code>*a – b == 0 (0x2f – b == 0)</code>，所以<code>b = 0x2f</code>，递归返回。<br><img src="/2020/12/09/csapp-bomb/csapp-bomb"><br>得到3个不等式和一个等式：</p></li><li><p><code>0x24 – 0x2f &lt; 0</code></p></li><li><p><code>0x32 – 0x2f &gt; 0</code></p></li><li><p><code>0x2d – 0x2f &lt; 0</code></p></li><li><p><code>b = 0x2f</code><br>转为十进制 b = 47，故隐藏关卡密码为47。</p></li></ol><p>淦！！！！！！！  </p><p>以上是正常情况下应该得出理解答案的结果，但是事实并不如我想象。操作后并没有得到答案。但是答案确实是47。<br>通过不断的查找，发现存着47的地址在老后面了，完全不对啊。 淦，问题真多。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2020/12/09/csapp-bomb/result.png"></p><h3 id="淦"><a href="#淦" class="headerlink" title="淦"></a>淦</h3><p>不干了，淦。实验很不错，结果很离谱，头发快没了，心态早崩了。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> Csapp </tag>
            
            <tag> 汇编语言 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Actions实现Hexo博客在Github上的自动部署</title>
      <link href="2020/11/30/using-gitActions/"/>
      <url>2020/11/30/using-gitActions/</url>
      
        <content type="html"><![CDATA[<p>使用自动部署之前，我都是用的<code>hexo deploy</code>把每次生成的<code>public</code>文件夹上传到github上去，使用自动部署之后，就省略掉了这一步骤，但是多了这三步</p><blockquote><p>git add -A<br>git commit -m “imformaion”<br>git push</p></blockquote><p>看似并没有简化自己的操作，实际上好处很多  </p><ul><li>博客源码托管在Github的仓库，避免源码丢失的风险</li><li>Github会记录每一次<code>commit</code>，方便回溯</li><li>高逼格</li><li>……  </li></ul><h3 id="关于自动化部署"><a href="#关于自动化部署" class="headerlink" title="关于自动化部署"></a>关于自动化部署</h3><p>百度词条中的<a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/18750522"><u>自动化部署</u></a></p><p>以及<code>CI\CD</code>——CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。  </p><p><a href="https://github.com/features/actions"><code>github Actions</code></a> 是 <a href="https://github.com/"><code>GitHub</code></a> 的持续集成服务，于2018年10月推出。</p><p>还有一个类似的是<a href="https://travis-ci.org/"><code>TravisCI</code></a>。  </p><p>我之前使用的就是<code>TravisCI</code>，然后出了点小小的问题，其无法使用，然后一直配置不好，我就开始使用<code>GitHub Actions</code>，而且有大佬说<code>觉得它非常强大，有创意，比 Travis CI 玩法更多。</code></p><p>不多介绍，就推荐几个大佬的文章</p><ul><li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li><li><a href="https://blog.kaygb.com/210.html">基于Github actions自动部署Hexo博客</a></li><li><a href="https://xirikm.net/2020/313-1">使用 GitHub Actions 自动构建 Hexo 博客</a></li></ul><p>不多介绍了，直接说我怎么使用<code>github actions</code>的，主要chao了大佬的东西。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>需要一个<code>GitHub</code>帐号、一个 <code>GitHub Pages</code>仓库、一个<code>Hexo</code>博客备份仓库/分支。另外我们还需要获取一个<code>GitHub Personal Access Token</code>用来推送构建好的文件到我们的<code>GitHub Pages</code>仓库。具体的操作这里不再重复叙述，有需要了解的可以去看之前的文章。</p><p>点开博客备份仓库上方的<code>Settings</code>，点到左侧的<code>Secrets</code>项，添加两个秘密环境变量<code>GH_REF </code>、<code>GH_TOKEN</code>，值分别填写自己的<code>GitHub Pages</code> 仓库地址（不包含 https:// ）和刚刚申请到的<code>GitHub Personal Access Token</code>。</p><p><img src="/2020/11/30/using-gitActions/secret.png" alt="secrets"></p><h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><p>准备工作做好后就可以开始编写<code>GitHub Actions</code>配置文件了，这里对 Hexo 博客编译部署的步骤进行拆分讲解。</p><p>配置文件的目录——在站点目录下新建<code>.github</code>文件夹，再在其中新建文件夹<code>workflows</code>，在创建<code>×××××××.yml</code>文件，命名随意。</p><p><img src="/2020/11/30/using-gitActions/address.png" alt="创建结果"></p><h3 id="触发条件和运行环境"><a href="#触发条件和运行环境" class="headerlink" title="触发条件和运行环境"></a>触发条件和运行环境</h3><p>我们设置在<code>master</code>分支上发生<code>push</code>操作时触发构建，使用最新的<code>Ubuntu</code>系统作为编译部署的环境，同时设置一个全局环境变量将时区修改为<code>Asia/Shanghai</code>(修改原因见 <a href="https://xirikm.net/2020/215-1.html)%EF%BC%8C%E5%85%B7%E4%BD%93%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A">https://xirikm.net/2020/215-1.html)，具体的配置内容如下：</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br></pre></td></tr></table></figure><h3 id="建立工作环境"><a href="#建立工作环境" class="headerlink" title="建立工作环境"></a>建立工作环境</h3><p>上面的大前提确定后就可以来开始建立我们的工作环境了（注： 后续所有步骤的配置都是接在上面<code>steps</code>块下的，不要弄混了层级关系）。</p><p>首先检出代码，设置一下<code>node</code>环境，我们这里使用<code>12.x</code>版本的<code>node.js</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br></pre></td></tr></table></figure><p>然后设置一下缓存目录以避免每次都要重新下载，从而加快构建速度（官方不建议直接缓存<code>node_modules</code>目录，所以这里设置的是<code>npm</code>的下载缓存目录<code>~/.npm</code>，这样后面仍需要使用<code>npm install</code>来安装依赖）。这里使用的是<code>package-lock.json</code>文件的<code>hash</code>值来标识缓存是否可以命中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>最后就是安装依赖了，这个根据自己的需要操作就行，由于我使用了<code>gulp</code>任务来压缩<code>Hexo</code>生成的文件，所以我这里除了<code>hexo-cli</code>还全局安装了<code>gulp</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">gulp</span> <span class="string">-g</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><h3 id="生成部署文件"><a href="#生成部署文件" class="headerlink" title="生成部署文件"></a>生成部署文件</h3><p>这一步简单点<code>hexo g</code>就行了，我这里多加了一步执行 gulp 任务的操作（将其放在两个<code>step</code>中而不是一次性执行是为了方便在日志中看到每个操作消耗的时间）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Execute</span> <span class="string">gulp</span> <span class="string">task</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">gulp</span></span><br></pre></td></tr></table></figure><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>我们先将<code>GitHub Pages</code>仓库克隆过来，将其中的<code>.git</code>目录移到存放部署文件的<code>public</code>目录中（为了保留<code>GitHub Pages</code>仓库的提交历史），然后进入<code>public</code>目录设置一下提交用户名和邮箱，<code>add</code>所有文件并提交，最后利用保存在秘密环境变量中的<code>GitHub Personal Access Token</code>推送到<code>GitHub Pages</code>仓库中就可以了：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">deploy_git</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">./deploy_git/.git</span> <span class="string">./public/</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">    <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span>@$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><h3 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">gulp</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Execute</span> <span class="string">gulp</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">deploy_git</span></span><br><span class="line">        <span class="string">mv</span> <span class="string">./deploy_git/.git</span> <span class="string">./public/</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span>@$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xirikm.net/2020/313-1"><u>使用 GitHub Actions 自动构建 Hexo 博客</u></a></p><p><strong>持续更新中</strong><br><strong>暂时这么样</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push不用每次输入用户名和密码</title>
      <link href="2020/11/24/git-password/"/>
      <url>2020/11/24/git-password/</url>
      
        <content type="html"><![CDATA[<p><strong>仅供参考</strong></p><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>每次<code>git push</code>时都要输入用户名和密码，觉得很累。  就想只输入一次将用户名密码保存下来，避免每次都要重新输入。  </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &#x2F;git push (这里需要输入用户名和密码，以后就不用啦)</span><br></pre></td></tr></table></figure><p>push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码 ! 这一步会在用户目录下生成文件.<code>git-credential</code>记录用户名密码的信息。</p><p>然后就可以了。</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>emmm，使用方法之前，我需要输入两次用户名密码，使用后我只需要输入一次啦，这是一次巨大的”成功“。<br><img src="/2020/11/24/git-password/cry~~~~.jpg"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/LosingCarryJie/article/details/73801554">git不用每次输入用户名和密码</a></p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blogs </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Github + hexo网页无法显示图片问题</title>
      <link href="2020/11/24/cannot-display-pictrue/"/>
      <url>2020/11/24/cannot-display-pictrue/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>md文件中加入图片链接后，在网页上无法显示图片。  </p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.修改站点配置文件(博客目录下的)<code>_config.yml</code>  </p><ul><li>改<code>post_asset_folder: false</code>为<code>true</code>。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动 Asset 文件夹 （用来存放相对路径图片或文件）</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p>2.安装插件，在命令窗口输入  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br></pre></td></tr></table></figure><p>3.在markdown编辑时引入图片<br>例如：  </p><p>首先创建博客及其文件夹  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new XXXXXX</span><br><span class="line"># XXXXX 为 文件名</span><br></pre></td></tr></table></figure><p>或者您手动”新建文件夹“  </p><p>结果如下<br><img src="/2020/11/24/cannot-display-pictrue/menu.png" alt="文件目录"></p><p>然后md文件中再合适的位置插入图片链接  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">result</span>](<span class="link">datalab-handout/datalab-handout.png</span>) </span><br></pre></td></tr></table></figure><blockquote><p>result 为 图片描述<br>datalab-handout/datalab-handout.png为图片保存路径  </p></blockquote><p>4.解决后的效果<br><img src="/2020/11/24/cannot-display-pictrue/display.png"><br>就成功显示了。</p><h3 id="紫薯布丁"><a href="#紫薯布丁" class="headerlink" title="紫薯布丁"></a>紫薯布丁</h3><p>不保证方法百分百解决您的问题，仅仅提供一个方案（能解决我的问题的方案），无法解决的话，请您继续百度以查看他人的方法。  </p><p>参考：<br><a href="https://www.dazhuanlan.com/2019/10/16/5da647c849379/">github+hexo博客无法显示图片解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础实验之datalab-handout</title>
      <link href="2020/11/10/datalab-handout/"/>
      <url>2020/11/10/datalab-handout/</url>
      
        <content type="html"><![CDATA[<h2 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h2><p>下载 <code>lab1-handout.tar</code></p><blockquote><p>(可由老师提供，或者在<code>http://csapp.cs.cmu.edu/3e/labs.html</code><a href="http://csapp.cs.cmu.edu/3e/labs.html">csapp</a>下载,获取方法是点击实验后面的<code>Self-Study Handout</code>)，存放在下载目录</p></blockquote><a id="more"></a><p>点击左侧<code>dock</code>图标      ，键入<code>term</code>，打开终端</p><ul><li><code>cd ~</code>    进入主目录      键入 </li><li><code>ls</code> 查看是否有下载文件</li><li><code>tar vxf lab1-handout.tar</code>   解压代码框架  </li><li><code>cd lab1-handout</code></li><li><code>ls</code>    显示当前目录文件</li><li><code>make</code>   编译生成可执行文件</li><li><code>ls</code>  看看多了几个文件</li><li><code>./btest</code>试试运行   </li></ul><p>本实验是默认在32位机上进行测试。</p><h2 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h2><h3 id="1-bitBor函数"><a href="#1-bitBor函数" class="headerlink" title="1.bitBor函数"></a>1.bitBor函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用~和&amp;实现x^y</li></ul><p>法1：  </p><ul><li>题意：用 ~ 和 &amp; 运算符实现 Xor 运算符</li><li>思路：我们知道Xor运算符是对每一个位，相同的话返回0，不同的话返回1，即((<del>x)&amp;y)|(x&amp;(</del>y))。但不能使用|运算，故采用德摩根律将或运算转为与运算。</li></ul><p>法2：</p><ul><li>利用《数字逻辑》的知识：异或运算 德摩根律<blockquote><p>x ^ y = (x &amp; ~y) | (~x &amp; y)<br>= ~((x &amp; ~y) | (~x &amp; y))<br>= ~(~(x &amp; ~y) &amp; ~(~x &amp; y))  D</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(x &amp; ~y) &amp; ~(~x &amp; y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-tmim函数"><a href="#2-tmim函数" class="headerlink" title="2.tmim函数"></a>2.tmim函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>题意：输出反码下的最小值</li><li>思路：直接由定义得最小值  </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-isTmax函数"><a href="#3-isTmax函数" class="headerlink" title="3.isTmax函数"></a>3.isTmax函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个数是否为有符号数的最大值Tmax，即  </p><blockquote><p>0x7FFFFFFF   16进制<br>2147483647   10进制<br>0111 1111 1111 1111 1111 1111 1111 1111    2进制(32位系统)</p></blockquote><blockquote><p>Tmax满足:  Tmax = ~(Tmax + 1)    Tmax ^ (~(Tmax + 1)) = 0<br>0xFFFFFFFF也满足上述关系，但0xFFFFFFFF + 1 为 0, 所以要排除这种情况。  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x ^ ~(x + <span class="number">1</span>)) &amp; !!(x + <span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-allOddBits函数"><a href="#4-allOddBits函数" class="headerlink" title="4.allOddBits函数"></a>4.allOddBits函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个二进制数奇数位是否全为1<br>思路:<br>若x奇数位全为1，则~x的奇数位全为0，则~x &amp; 0xaaaaaaaa 使得全部为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int allOddBits(int x) &#123;</span><br><span class="line">  return !(~x &amp; 0xaaaaaaaa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-negate函数"><a href="#5-negate函数" class="headerlink" title="5.negate函数"></a>5.negate函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求一个数的相反数。<br>思路: -x = ~x + 1  (取反加一)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-isAsciiDigit函数"><a href="#6-isAsciiDigit函数" class="headerlink" title="6.isAsciiDigit函数"></a>6.isAsciiDigit函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个数字是否在0x30到0x39范围之内。<br>思路:<br>判断差值是否大于等于<code>x - y &gt;= 0</code> 即 <code>取符号位且取逻辑反</code>  </p><blockquote><p>!(x + (<del>y + 1) &gt;&gt; 31)<br>x + (</del>y + 1) &gt;&gt; 31   取符号位</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(x + (~<span class="number">0x30</span> + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; !(<span class="number">0x39</span> + (~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="7-conditional函数"><a href="#7-conditional函数" class="headerlink" title="7.  conditional函数"></a>7.  conditional函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：实现一个三目运算符 <code>x ? y : z</code><br>思路：用<code>!</code>判断<code>x</code>的真假；<code>x ? y : z</code>的关系转换为<code>(a &amp; y) | (b &amp; z)</code>，当<code>x</code>为<code>0</code>时，<code>a</code>为<code>0x0</code>，<code>b</code>为<code>0xffffffff</code>；当<code>x</code>非零时，<code>a</code>为<code>0xffffffff</code>,<code>b</code>为<code>0x0</code>。即  </p><blockquote><p>0x0 &amp; 0xaaa = 0<br>0xffffffff &amp; 0xaaa = 0xaaa   </p></blockquote><p>所以得使得<code>a = !x + 0xffffffff</code>,<code>b = !!x + 0xffffffff</code>，这样<code>a</code> <code>b</code>就会要么是<code>0x0</code> <code>0xffffffff</code>。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((!x + <span class="number">0xffffffff</span>)&amp; y) | (z &amp; (!!x + <span class="number">0xffffffff</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-isLessOrEqual函数"><a href="#8-isLessOrEqual函数" class="headerlink" title="8.isLessOrEqual函数"></a>8.isLessOrEqual函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：若<code>x &lt;= y</code>，则返回<code>1</code>，反之返回<code>0</code>。<br>思路：直接用y-x可能会超出int的表示范围，故而：</p><blockquote><p>1.在x与y同号的情况下转换为p=y-x&gt;=0，然后对p符号位进行(p&gt;&gt;31)&amp;1操作，符号位为0则返回1，符号位1则返回0；<br>2.x，y异号时，只要x&gt;=0，就要返回0，否则返回1，由(x&gt;&gt;31)&amp;1能达到该效果；<br>3.c=a+b可作为x，y同号异号的判断。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_x = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_y = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_xy = sign_bit_x + sign_bit_y;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_subyx = ((y + ~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (sign_bit_xy &amp; (sign_bit_x &amp; <span class="number">1</span>)) | ((~sign_bit_xy) &amp; !sign_bit_subyx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-logicalNeg函数"><a href="#9-logicalNeg函数" class="headerlink" title="9.logicalNeg函数"></a>9.logicalNeg函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>题意：计算 !x：当 x = 0 时返回 1；当 x ≠ 0 时返回 0。<br>思路：<code>0</code>和<code>Tmin</code>的补码都是其本身，而其他数的补码则是符号位相反。所以要区别<code>0</code>和<code>Tmin</code>的区别  </p><blockquote><p>0x0000 0000<br>0x8000 0000    </p></blockquote><p>即最高位不同，故用算数右移取符号位判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((~x &amp; ~(~x + <span class="number">1</span>)) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-haoManyBits函数"><a href="#10-haoManyBits函数" class="headerlink" title="10.haoManyBits函数"></a>10.haoManyBits函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给一个数字x,求出要表示出x需要的最少的位数。  </p><p>思路：  使用二分法。  </p><p> 若<code>x</code>是负数，那么对其取反，因为所需要的位数是一样的。  </p><blockquote><p>即  x = (((x &gt;&gt; 31) &amp; <del>x) | ((</del>!(x &gt;&gt; 31) + 1) &amp; x)) </p></blockquote><p>然后是用二分法，先向右位移16位，即<code>half_x = x &gt;&gt; 16</code>，再判断<code>half_x</code>是否为<code>0</code>，即<code>!!half_x</code>。若为<code>0</code>，则<code>x</code>的最高位数为<code>16</code>；反之，其最低位数为<code>16</code>。依此类推，继续对其右移<code>8</code>、<code>4</code>、<code>2</code>、<code>1</code>位，得到<code>bit8</code>, <code>bit4</code>, <code>bit2</code>, <code>bit1</code>,分别表示一分为二后其中的一半是否存在，而另一半继续循环直至1，这时还剩下<code>x</code>，最后还需要再加上符号位<code>0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  x = (((x &gt;&gt; <span class="number">31</span>) &amp; ~x) | ((~!(x &gt;&gt; <span class="number">31</span>) + <span class="number">1</span>) &amp; x));</span><br><span class="line">  <span class="keyword">int</span> bit16, bit8, bit4, bit2, bit1;</span><br><span class="line">  <span class="keyword">int</span> half_x;</span><br><span class="line">  </span><br><span class="line">  half_x = x &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  bit16 = !!half_x &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; bit16;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  bit8 = !!half_x &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  x = x &gt;&gt; bit8;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  bit4 = !!half_x &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  x = x &gt;&gt; bit4;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  bit2 = !!half_x &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  x = x &gt;&gt; bit2;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  bit1 = !!half_x &lt;&lt; <span class="number">0</span>;</span><br><span class="line">  x = x &gt;&gt; bit1;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> bit16 + bit8 + bit4 + bit2 + bit1 + <span class="number">1</span> + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-floatScale2函数"><a href="#11-floatScale2函数" class="headerlink" title="11.floatScale2函数"></a>11.floatScale2函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给出一个无符号整数<code>x</code>，将其看作一个浮点数，返回此数的两倍<code>x*2</code>。<br>思路： 取出符号<code>s</code>、阶码<code>exp</code>、尾数<code>frac</code>   </p><blockquote><p>sgn = uf &amp; 0x80000000<br>exp = uf &amp; 0x7F800000<br>frac = uf &amp; 0x007FFFFF  </p></blockquote><p>若<code>exp</code>为0，则是非规格，直接左移。<br>若<code>exp</code>不是<code>0x7F80 0000</code>，即有效，则直接阶码加一。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> f = uf;</span><br><span class="line">  <span class="keyword">unsigned</span> sgn = uf &amp; <span class="number">0x80000000</span>;<span class="comment">//符号位</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="built_in">exp</span> = uf &amp; <span class="number">0x7F800000</span>;<span class="comment">//阶码</span></span><br><span class="line">  <span class="keyword">unsigned</span> frac = uf &amp; <span class="number">0x007FFFFF</span>;<span class="comment">//位数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)  </span><br><span class="line">    f = (frac &lt;&lt; <span class="number">1</span>) | sgn;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span> != <span class="number">0x7F800000</span>) </span><br><span class="line">     f = f + <span class="number">0x00800000</span>;<span class="comment">//阶码+1</span></span><br><span class="line">  <span class="keyword">return</span> f;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-floatFloat2Int函数"><a href="#12-floatFloat2Int函数" class="headerlink" title="12.floatFloat2Int函数"></a>12.floatFloat2Int函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：给出一个无符号整数x，将其看作一个浮点数，实现一个(int)x的功能。  </p><p>思路：</p><p>主要是思考上下界溢出的问题。</p><p>下界溢出的临界是<code>bin(x) = 0 0111 1111 0000 0000 0000 0000 0000 000</code>，此时<code>s = 0</code>，<code>exp = 127</code>，<code>frac = 0</code>。表示的数字刚好是<code>1.0</code>。小于这个数直接返回<code>0</code>。</p><p>上界溢出的条件是<code>bin(x) = 0 1001 1101 0000 0000 0000 0000 0000 000</code>，此时<code>s = 0</code>，<code>exp = 127 + 31</code>，<code>frac = 0</code>。表示的数是<code>1.0*2**32</code>，也就是<code>TMax</code>，大于这个数就直接返回<code>TMax</code>。</p><p>其他数字考虑<code>exp = 127 + 23</code>这个临界。如果大于这个数，需要将<code>frac</code>右移。如果小于这个数，需要将<code>frac</code>左移。   </p><p>法一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s = (uf &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = ((uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>) - <span class="number">127</span>; <span class="comment">//exp的真实值</span></span><br><span class="line">  <span class="keyword">int</span> frac = (uf &amp; <span class="number">0x007FFFFF</span>) | <span class="number">0x00800000</span>;</span><br><span class="line">  <span class="keyword">int</span> tar = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (s) s = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> s = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">31</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">23</span>)</span><br><span class="line">    tar = s * (frac &lt;&lt; (<span class="built_in">exp</span> - <span class="number">23</span>));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">23</span>)</span><br><span class="line">    tar = s * (frac &gt;&gt; (<span class="number">23</span> - <span class="built_in">exp</span>));</span><br><span class="line">  <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;   <span class="comment">// INF = MaxInt+1</span></span><br><span class="line">    <span class="keyword">int</span> e = (uf&gt;&gt;<span class="number">23</span>) &amp; <span class="number">0xff</span>;<span class="comment">// 阶码</span></span><br><span class="line">    <span class="keyword">int</span> s = (uf&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;   <span class="comment">// 符号位</span></span><br><span class="line">    <span class="keyword">if</span> (uf == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    uf &lt;&lt;= <span class="number">8</span>;       <span class="comment">// 左移保留至阶码最后1位</span></span><br><span class="line">    uf |= <span class="number">1</span>&lt;&lt;<span class="number">31</span>;    <span class="comment">// 阶码最后一位设为1</span></span><br><span class="line">    uf &gt;&gt;= <span class="number">8</span>;       <span class="comment">// 高八位全0</span></span><br><span class="line">    e -= <span class="number">127</span>;       <span class="comment">// 阶数</span></span><br><span class="line">    <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f80000</span>) == <span class="number">0x7f80000</span> || e &gt;= <span class="number">32</span>)</span><br><span class="line">        <span class="keyword">return</span> INF; <span class="comment">// 超过int范围返回INF</span></span><br><span class="line">    <span class="keyword">if</span> (e &lt; <span class="number">0</span>) <span class="comment">// 小数返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &lt;= <span class="number">22</span>) <span class="comment">// 位数小于等于22位，尾数位右移</span></span><br><span class="line">        uf &gt;&gt;= <span class="number">23</span>-e;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        uf &lt;&lt;= e<span class="number">-23</span>; <span class="comment">// 尾数大于22位，尾数为左移</span></span><br><span class="line">    <span class="keyword">if</span> (s) </span><br><span class="line">        uf = ~uf + <span class="number">1</span>;<span class="comment">// 若原uf为负数，则对此处的正数uf取反加1得其相反数</span></span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-floatPower2函数"><a href="#13-floatPower2函数" class="headerlink" title="13.floatPower2函数"></a>13.floatPower2函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给出一个无符号整数x，将其看作一个浮点数，返回2**x。   </p><p>思路：  先得到阶码<code>exp = x + 127</code>，然后考虑临界值：  </p><p><code>bin(x) = 0 00000000 00000000000000000000001</code>，此数是<code>2**((-126)+(-23))</code>,<br>即<code>exp = 0</code>时情况；  </p><p><code>bin(x) = 0 00000001 00000000000000000000000</code>，此数是<code>2**(-126)</code>，<br>即<code>exp = 23</code>时情况；</p><p><code>bin(x) = 0 11111111 00000000000000000000000</code> ，此数是<code>2**(128)</code>，<br>即<code>exp = 255</code>时情况。</p><p>代码一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">0x7f</span>;                          <span class="comment">// x + 127</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>) </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exp</span> &lt; <span class="number">0xff</span> ? <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span> : <span class="number">0x7f800000</span>;  <span class="comment">//0xff = 255</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> INF = <span class="number">0xff</span> &lt;&lt; <span class="number">23</span>; <span class="comment">// 阶码全1</span></span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">127</span> + x;    <span class="comment">// 得到阶码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>) <span class="comment">// 阶数小于0直接返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &gt;= <span class="number">255</span>) <span class="comment">// 阶码&gt;=255直接返回INF</span></span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> e &lt;&lt; <span class="number">23</span>;</span><br><span class="line">    <span class="comment">// 直接将阶码左移23位，尾数全0，规格化时尾数隐藏有1个1作为底数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2020/11/10/datalab-handout/datalab-handout.png" alt="result"> </p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>不愧是计算机系统的实验，实验内容和系统基础知识紧密联系，所接触到的不再是10进制数的计算，而是二进制及其反码补码，十六进制的计算，也不再仅仅是算术运算而更多的是逻辑、位的运算。由于知识储备的限制，一开始进行试验的时候实在是无从下手，思路上也受到了极大的限制，加之对于反码补码、有符号数无符号数、逻辑运算符、位运算符等等之类掌握的不深切，就觉得实验真的很难，当然本次实验的难度确实很大，实验内容也仅是datalab-handout的一部分，对其研究个八九不离十，十分有利与我对计算机系统学习，同时也要做好学习记录，以便日后回忆。  </p><p>tip：<br>  这篇博客会在后续继续完善（在自己更加明白时），目前内容仅供参考。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
            <tag> 位计算 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 实验记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

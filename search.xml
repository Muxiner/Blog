<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Github Actions实现Hexo博客在Github上的自动部署</title>
      <link href="2020/11/30/using-gitActions/"/>
      <url>2020/11/30/using-gitActions/</url>
      
        <content type="html"><![CDATA[<p>使用自动部署之前，我都是用的<code>hexo deploy</code>把每次生成的<code>public</code>文件夹上传到github上去，使用自动部署之后，就省略掉了这一步骤，但是多了这三步</p><blockquote><p>git add -A<br>git commit -m “imformaion”<br>git push</p></blockquote><p>看似并没有简化自己的操作，实际上好处很多  </p><ul><li>博客源码托管在Github的仓库，避免源码丢失的风险</li><li>Github会记录每一次<code>commit</code>，方便回溯</li><li>高逼格</li><li>……  </li></ul><h3 id="关于自动化部署"><a href="#关于自动化部署" class="headerlink" title="关于自动化部署"></a>关于自动化部署</h3><p>百度词条中的<a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/18750522"><u>自动化部署</u></a></p><p>以及<code>CI\CD</code>——CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。  </p><p><a href="https://github.com/features/actions"><code>github Actions</code></a> 是 <a href="https://github.com/"><code>GitHub</code></a> 的持续集成服务，于2018年10月推出。</p><p>还有一个类似的是<a href="https://travis-ci.org/"><code>TravisCI</code></a>。  </p><p>我之前使用的就是<code>TravisCI</code>，然后出了点小小的问题，其无法使用，然后一直配置不好，我就开始使用<code>GitHub Actions</code>，而且有大佬说<code>觉得它非常强大，有创意，比 Travis CI 玩法更多。</code></p><p>不多介绍，就推荐几个大佬的文章</p><ul><li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li><li><a href="https://blog.kaygb.com/210.html">基于Github actions自动部署Hexo博客</a></li><li><a href="https://xirikm.net/2020/313-1">使用 GitHub Actions 自动构建 Hexo 博客</a></li></ul><p>不多介绍了，直接说我怎么使用<code>github actions</code>的，主要chao了大佬的东西。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>需要一个<code>GitHub</code>帐号、一个 <code>GitHub Pages</code>仓库、一个<code>Hexo</code>博客备份仓库/分支。另外我们还需要获取一个<code>GitHub Personal Access Token</code>用来推送构建好的文件到我们的<code>GitHub Pages</code>仓库。具体的操作这里不再重复叙述，有需要了解的可以去看之前的文章。</p><p>点开博客备份仓库上方的<code>Settings</code>，点到左侧的<code>Secrets</code>项，添加两个秘密环境变量<code>GH_REF </code>、<code>GH_TOKEN</code>，值分别填写自己的<code>GitHub Pages</code> 仓库地址（不包含 https:// ）和刚刚申请到的<code>GitHub Personal Access Token</code>。</p><p><img src="/2020/11/30/using-gitActions/secret.png" alt="secrets"></p><h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><p>准备工作做好后就可以开始编写<code>GitHub Actions</code>配置文件了，这里对 Hexo 博客编译部署的步骤进行拆分讲解。</p><p>配置文件的目录——在站点目录下新建<code>.github</code>文件夹，再在其中新建文件夹<code>workflows</code>，在创建<code>×××××××.yml</code>文件，命名随意。</p><p><img src="/2020/11/30/using-gitActions/address.png" alt="创建结果"></p><h3 id="触发条件和运行环境"><a href="#触发条件和运行环境" class="headerlink" title="触发条件和运行环境"></a>触发条件和运行环境</h3><p>我们设置在<code>master</code>分支上发生<code>push</code>操作时触发构建，使用最新的<code>Ubuntu</code>系统作为编译部署的环境，同时设置一个全局环境变量将时区修改为<code>Asia/Shanghai</code>(修改原因见 <a href="https://xirikm.net/2020/215-1.html)%EF%BC%8C%E5%85%B7%E4%BD%93%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A">https://xirikm.net/2020/215-1.html)，具体的配置内容如下：</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br></pre></td></tr></table></figure><h3 id="建立工作环境"><a href="#建立工作环境" class="headerlink" title="建立工作环境"></a>建立工作环境</h3><p>上面的大前提确定后就可以来开始建立我们的工作环境了（注： 后续所有步骤的配置都是接在上面<code>steps</code>块下的，不要弄混了层级关系）。</p><p>首先检出代码，设置一下<code>node</code>环境，我们这里使用<code>12.x</code>版本的<code>node.js</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br></pre></td></tr></table></figure><p>然后设置一下缓存目录以避免每次都要重新下载，从而加快构建速度（官方不建议直接缓存<code>node_modules</code>目录，所以这里设置的是<code>npm</code>的下载缓存目录<code>~/.npm</code>，这样后面仍需要使用<code>npm install</code>来安装依赖）。这里使用的是<code>package-lock.json</code>文件的<code>hash</code>值来标识缓存是否可以命中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>最后就是安装依赖了，这个根据自己的需要操作就行，由于我使用了<code>gulp</code>任务来压缩<code>Hexo</code>生成的文件，所以我这里除了<code>hexo-cli</code>还全局安装了<code>gulp</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">gulp</span> <span class="string">-g</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><h3 id="生成部署文件"><a href="#生成部署文件" class="headerlink" title="生成部署文件"></a>生成部署文件</h3><p>这一步简单点<code>hexo g</code>就行了，我这里多加了一步执行 gulp 任务的操作（将其放在两个<code>step</code>中而不是一次性执行是为了方便在日志中看到每个操作消耗的时间）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Execute</span> <span class="string">gulp</span> <span class="string">task</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">gulp</span></span><br></pre></td></tr></table></figure><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>我们先将<code>GitHub Pages</code>仓库克隆过来，将其中的<code>.git</code>目录移到存放部署文件的<code>public</code>目录中（为了保留<code>GitHub Pages</code>仓库的提交历史），然后进入<code>public</code>目录设置一下提交用户名和邮箱，<code>add</code>所有文件并提交，最后利用保存在秘密环境变量中的<code>GitHub Personal Access Token</code>推送到<code>GitHub Pages</code>仓库中就可以了：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">deploy_git</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">./deploy_git/.git</span> <span class="string">./public/</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">    <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span>@$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><h3 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">gulp</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Execute</span> <span class="string">gulp</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">deploy_git</span></span><br><span class="line">        <span class="string">mv</span> <span class="string">./deploy_git/.git</span> <span class="string">./public/</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span>@$<span class="template-variable">&#123;&#123; secrets.GH_REF &#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xirikm.net/2020/313-1"><u>使用 GitHub Actions 自动构建 Hexo 博客</u></a></p><p><strong>持续更新中</strong><br><strong>暂时这么样</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push不用每次输入用户名和密码</title>
      <link href="2020/11/24/git-password/"/>
      <url>2020/11/24/git-password/</url>
      
        <content type="html"><![CDATA[<p><strong>仅供参考</strong></p><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>每次<code>git push</code>时都要输入用户名和密码，觉得很累。  就想只输入一次将用户名密码保存下来，避免每次都要重新输入。  </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &#x2F;git push (这里需要输入用户名和密码，以后就不用啦)</span><br></pre></td></tr></table></figure><p>push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码 ! 这一步会在用户目录下生成文件.<code>git-credential</code>记录用户名密码的信息。</p><p>然后就可以了。</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>emmm，使用方法之前，我需要输入两次用户名密码，使用后我只需要输入一次啦，这是一次巨大的”成功“。<br><img src="/2020/11/24/git-password/cry~~~~.jpg"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/LosingCarryJie/article/details/73801554">git不用每次输入用户名和密码</a></p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blogs </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Github + hexo网页无法显示图片问题</title>
      <link href="2020/11/24/cannot-display-pictrue/"/>
      <url>2020/11/24/cannot-display-pictrue/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>md文件中加入图片链接后，在网页上无法显示图片。  </p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.修改站点配置文件(博客目录下的)<code>_config.yml</code>  </p><ul><li>改<code>post_asset_folder: false</code>为<code>true</code>。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动 Asset 文件夹 （用来存放相对路径图片或文件）</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p>2.安装插件，在命令窗口输入  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br></pre></td></tr></table></figure><p>3.在markdown编辑时引入图片<br>例如：  </p><p>首先创建博客及其文件夹  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new XXXXXX</span><br><span class="line"># XXXXX 为 文件名</span><br></pre></td></tr></table></figure><p>或者您手动”新建文件夹“  </p><p>结果如下<br><img src="/2020/11/24/cannot-display-pictrue/menu.png" alt="文件目录"></p><p>然后md文件中再合适的位置插入图片链接  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">result</span>](<span class="link">datalab-handout/datalab-handout.png</span>) </span><br></pre></td></tr></table></figure><blockquote><p>result 为 图片描述<br>datalab-handout/datalab-handout.png为图片保存路径  </p></blockquote><p>4.解决后的效果<br><img src="/2020/11/24/cannot-display-pictrue/display.png"><br>就成功显示了。</p><h3 id="紫薯布丁"><a href="#紫薯布丁" class="headerlink" title="紫薯布丁"></a>紫薯布丁</h3><p>不保证方法百分百解决您的问题，仅仅提供一个方案（能解决我的问题的方案），无法解决的话，请您继续百度以查看他人的方法。  </p><p>参考：<br><a href="https://www.dazhuanlan.com/2019/10/16/5da647c849379/">github+hexo博客无法显示图片解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础实验之datalab-handout</title>
      <link href="2020/11/10/datalab-handout/"/>
      <url>2020/11/10/datalab-handout/</url>
      
        <content type="html"><![CDATA[<h2 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h2><p>下载 <code>lab1-handout.tar</code></p><blockquote><p>(可由老师提供，或者在<code>http://csapp.cs.cmu.edu/3e/labs.html</code><a href="http://csapp.cs.cmu.edu/3e/labs.html">csapp</a>下载,获取方法是点击实验后面的<code>Self-Study Handout</code>)，存放在下载目录</p></blockquote><a id="more"></a><p>点击左侧<code>dock</code>图标      ，键入<code>term</code>，打开终端</p><ul><li><code>cd ~</code>    进入主目录      键入 </li><li><code>ls</code> 查看是否有下载文件</li><li><code>tar vxf lab1-handout.tar</code>   解压代码框架  </li><li><code>cd lab1-handout</code></li><li><code>ls</code>    显示当前目录文件</li><li><code>make</code>   编译生成可执行文件</li><li><code>ls</code>  看看多了几个文件</li><li><code>./btest</code>试试运行   </li></ul><p>本实验是默认在32位机上进行测试。</p><h2 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h2><h3 id="1-bitBor函数"><a href="#1-bitBor函数" class="headerlink" title="1.bitBor函数"></a>1.bitBor函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用~和&amp;实现x^y</li></ul><p>法1：  </p><ul><li>题意：用 ~ 和 &amp; 运算符实现 Xor 运算符</li><li>思路：我们知道Xor运算符是对每一个位，相同的话返回0，不同的话返回1，即((<del>x)&amp;y)|(x&amp;(</del>y))。但不能使用|运算，故采用德摩根律将或运算转为与运算。</li></ul><p>法2：</p><ul><li>利用《数字逻辑》的知识：异或运算 德摩根律<blockquote><p>x ^ y = (x &amp; <del>y) | (</del>x &amp; y)<br>= <del>((x &amp; ~y) | (</del>x &amp; y))<br>= <del>(</del>(x &amp; <del>y) &amp; ~(</del>x &amp; y))  D</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(x &amp; ~y) &amp; ~(~x &amp; y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-tmim函数"><a href="#2-tmim函数" class="headerlink" title="2.tmim函数"></a>2.tmim函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 题意：输出反码下的最小值</span><br><span class="line">* 思路：直接由定义得最小值  </span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### <span class="number">3.</span>isTmax函数  </span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个数是否为有符号数的最大值Tmax，即  </p><blockquote><p>0x7FFFFFFF   16进制<br>2147483647   10进制<br>0111 1111 1111 1111 1111 1111 1111 1111    2进制(32位系统)</p></blockquote><blockquote><p>Tmax满足:  Tmax = <del>(Tmax + 1)    Tmax ^ (</del>(Tmax + 1)) = 0<br>0xFFFFFFFF也满足上述关系，但0xFFFFFFFF + 1 为 0, 所以要排除这种情况。  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x ^ ~(x + <span class="number">1</span>)) &amp; !!(x + <span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-allOddBits函数"><a href="#4-allOddBits函数" class="headerlink" title="4.allOddBits函数"></a>4.allOddBits函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个二进制数奇数位是否全为1<br>思路:<br>若x奇数位全为1，则<del>x的奇数位全为0，则</del>x &amp; 0xaaaaaaaa 使得全部为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int allOddBits(int x) &#123;</span><br><span class="line">  return !(~x &amp; 0xaaaaaaaa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-negate函数"><a href="#5-negate函数" class="headerlink" title="5.negate函数"></a>5.negate函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求一个数的相反数。<br>思路: -x = ~x + 1  (取反加一)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-isAsciiDigit函数"><a href="#6-isAsciiDigit函数" class="headerlink" title="6.isAsciiDigit函数"></a>6.isAsciiDigit函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个数字是否在0x30到0x39范围之内。<br>思路:<br>判断差值是否大于等于<code>x - y &gt;= 0</code> 即 <code>取符号位且取逻辑反</code>  </p><blockquote><p>!(x + (<del>y + 1) &gt;&gt; 31)<br>x + (</del>y + 1) &gt;&gt; 31   取符号位</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(x + (~<span class="number">0x30</span> + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; !(<span class="number">0x39</span> + (~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="7-conditional函数"><a href="#7-conditional函数" class="headerlink" title="7.  conditional函数"></a>7.  conditional函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：实现一个三目运算符 <code>x ? y : z</code><br>思路：用<code>!</code>判断<code>x</code>的真假；<code>x ? y : z</code>的关系转换为<code>(a &amp; y) | (b &amp; z)</code>，当<code>x</code>为<code>0</code>时，<code>a</code>为<code>0x0</code>，<code>b</code>为<code>0xffffffff</code>；当<code>x</code>非零时，<code>a</code>为<code>0xffffffff</code>,<code>b</code>为<code>0x0</code>。即  </p><blockquote><p>0x0 &amp; 0xaaa = 0<br>0xffffffff &amp; 0xaaa = 0xaaa   </p></blockquote><p>所以得使得<code>a = !x + 0xffffffff</code>,<code>b = !!x + 0xffffffff</code>，这样<code>a</code> <code>b</code>就会要么是<code>0x0</code> <code>0xffffffff</code>。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((!x + <span class="number">0xffffffff</span>)&amp; y) | (z &amp; (!!x + <span class="number">0xffffffff</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-isLessOrEqual函数"><a href="#8-isLessOrEqual函数" class="headerlink" title="8.isLessOrEqual函数"></a>8.isLessOrEqual函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：若<code>x &lt;= y</code>，则返回<code>1</code>，反之返回<code>0</code>。<br>思路：直接用y-x可能会超出int的表示范围，故而：</p><blockquote><p>1.在x与y同号的情况下转换为p=y-x&gt;=0，然后对p符号位进行(p&gt;&gt;31)&amp;1操作，符号位为0则返回1，符号位1则返回0；<br>2.x，y异号时，只要x&gt;=0，就要返回0，否则返回1，由(x&gt;&gt;31)&amp;1能达到该效果；<br>3.c=a+b可作为x，y同号异号的判断。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_x = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_y = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_xy = sign_bit_x + sign_bit_y;</span><br><span class="line">  <span class="keyword">int</span> sign_bit_subyx = ((y + ~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (sign_bit_xy &amp; (sign_bit_x &amp; <span class="number">1</span>)) | ((~sign_bit_xy) &amp; !sign_bit_subyx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-logicalNeg函数"><a href="#9-logicalNeg函数" class="headerlink" title="9.logicalNeg函数"></a>9.logicalNeg函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>题意：计算 !x：当 x = 0 时返回 1；当 x ≠ 0 时返回 0。<br>思路：<code>0</code>和<code>Tmin</code>的补码都是其本身，而其他数的补码则是符号位相反。所以要区别<code>0</code>和<code>Tmin</code>的区别  </p><blockquote><p>0x0000 0000<br>0x8000 0000    </p></blockquote><p>即最高位不同，故用算数右移取符号位判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((~x &amp; ~(~x + <span class="number">1</span>)) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-haoManyBits函数"><a href="#10-haoManyBits函数" class="headerlink" title="10.haoManyBits函数"></a>10.haoManyBits函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给一个数字x,求出要表示出x需要的最少的位数。  </p><p>思路：  使用二分法。  </p><p> 若<code>x</code>是负数，那么对其取反，因为所需要的位数是一样的。  </p><blockquote><p>即  x = (((x &gt;&gt; 31) &amp; <del>x) | ((</del>!(x &gt;&gt; 31) + 1) &amp; x)) </p></blockquote><p>然后是用二分法，先向右位移16位，即<code>half_x = x &gt;&gt; 16</code>，再判断<code>half_x</code>是否为<code>0</code>，即<code>!!half_x</code>。若为<code>0</code>，则<code>x</code>的最高位数为<code>16</code>；反之，其最低位数为<code>16</code>。依此类推，继续对其右移<code>8</code>、<code>4</code>、<code>2</code>、<code>1</code>位，得到<code>bit8</code>, <code>bit4</code>, <code>bit2</code>, <code>bit1</code>,分别表示一分为二后其中的一半是否存在，而另一半继续循环直至1，这时还剩下<code>x</code>，最后还需要再加上符号位<code>0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  x = (((x &gt;&gt; <span class="number">31</span>) &amp; ~x) | ((~!(x &gt;&gt; <span class="number">31</span>) + <span class="number">1</span>) &amp; x));</span><br><span class="line">  <span class="keyword">int</span> bit16, bit8, bit4, bit2, bit1;</span><br><span class="line">  <span class="keyword">int</span> half_x;</span><br><span class="line">  </span><br><span class="line">  half_x = x &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  bit16 = !!half_x &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; bit16;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  bit8 = !!half_x &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  x = x &gt;&gt; bit8;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  bit4 = !!half_x &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  x = x &gt;&gt; bit4;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  bit2 = !!half_x &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  x = x &gt;&gt; bit2;</span><br><span class="line"></span><br><span class="line">  half_x = x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  bit1 = !!half_x &lt;&lt; <span class="number">0</span>;</span><br><span class="line">  x = x &gt;&gt; bit1;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> bit16 + bit8 + bit4 + bit2 + bit1 + <span class="number">1</span> + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-floatScale2函数"><a href="#11-floatScale2函数" class="headerlink" title="11.floatScale2函数"></a>11.floatScale2函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给出一个无符号整数<code>x</code>，将其看作一个浮点数，返回此数的两倍<code>x*2</code>。<br>思路： 取出符号<code>s</code>、阶码<code>exp</code>、尾数<code>frac</code>   </p><blockquote><p>sgn = uf &amp; 0x80000000<br>exp = uf &amp; 0x7F800000<br>frac = uf &amp; 0x007FFFFF  </p></blockquote><p>若<code>exp</code>为0，则是非规格，直接左移。<br>若<code>exp</code>不是<code>0x7F80 0000</code>，即有效，则直接阶码加一。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> f = uf;</span><br><span class="line">  <span class="keyword">unsigned</span> sgn = uf &amp; <span class="number">0x80000000</span>;<span class="comment">//符号位</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="built_in">exp</span> = uf &amp; <span class="number">0x7F800000</span>;<span class="comment">//阶码</span></span><br><span class="line">  <span class="keyword">unsigned</span> frac = uf &amp; <span class="number">0x007FFFFF</span>;<span class="comment">//位数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)  </span><br><span class="line">    f = (frac &lt;&lt; <span class="number">1</span>) | sgn;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span> != <span class="number">0x7F800000</span>) </span><br><span class="line">     f = f + <span class="number">0x00800000</span>;<span class="comment">//阶码+1</span></span><br><span class="line">  <span class="keyword">return</span> f;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-floatFloat2Int函数"><a href="#12-floatFloat2Int函数" class="headerlink" title="12.floatFloat2Int函数"></a>12.floatFloat2Int函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：给出一个无符号整数x，将其看作一个浮点数，实现一个(int)x的功能。  </p><p>思路：</p><p>主要是思考上下界溢出的问题。</p><p>下界溢出的临界是<code>bin(x) = 0 0111 1111 0000 0000 0000 0000 0000 000</code>，此时<code>s = 0</code>，<code>exp = 127</code>，<code>frac = 0</code>。表示的数字刚好是<code>1.0</code>。小于这个数直接返回<code>0</code>。</p><p>上界溢出的条件是<code>bin(x) = 0 1001 1101 0000 0000 0000 0000 0000 000</code>，此时<code>s = 0</code>，<code>exp = 127 + 31</code>，<code>frac = 0</code>。表示的数是<code>1.0*2**32</code>，也就是<code>TMax</code>，大于这个数就直接返回<code>TMax</code>。</p><p>其他数字考虑<code>exp = 127 + 23</code>这个临界。如果大于这个数，需要将<code>frac</code>右移。如果小于这个数，需要将<code>frac</code>左移。   </p><p>法一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s = (uf &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = ((uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>) - <span class="number">127</span>; <span class="comment">//exp的真实值</span></span><br><span class="line">  <span class="keyword">int</span> frac = (uf &amp; <span class="number">0x007FFFFF</span>) | <span class="number">0x00800000</span>;</span><br><span class="line">  <span class="keyword">int</span> tar = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (s) s = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> s = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">31</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">23</span>)</span><br><span class="line">    tar = s * (frac &lt;&lt; (<span class="built_in">exp</span> - <span class="number">23</span>));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">23</span>)</span><br><span class="line">    tar = s * (frac &gt;&gt; (<span class="number">23</span> - <span class="built_in">exp</span>));</span><br><span class="line">  <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;   <span class="comment">// INF = MaxInt+1</span></span><br><span class="line">    <span class="keyword">int</span> e = (uf&gt;&gt;<span class="number">23</span>) &amp; <span class="number">0xff</span>;<span class="comment">// 阶码</span></span><br><span class="line">    <span class="keyword">int</span> s = (uf&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;   <span class="comment">// 符号位</span></span><br><span class="line">    <span class="keyword">if</span> (uf == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    uf &lt;&lt;= <span class="number">8</span>;       <span class="comment">// 左移保留至阶码最后1位</span></span><br><span class="line">    uf |= <span class="number">1</span>&lt;&lt;<span class="number">31</span>;    <span class="comment">// 阶码最后一位设为1</span></span><br><span class="line">    uf &gt;&gt;= <span class="number">8</span>;       <span class="comment">// 高八位全0</span></span><br><span class="line">    e -= <span class="number">127</span>;       <span class="comment">// 阶数</span></span><br><span class="line">    <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f80000</span>) == <span class="number">0x7f80000</span> || e &gt;= <span class="number">32</span>)</span><br><span class="line">        <span class="keyword">return</span> INF; <span class="comment">// 超过int范围返回INF</span></span><br><span class="line">    <span class="keyword">if</span> (e &lt; <span class="number">0</span>) <span class="comment">// 小数返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &lt;= <span class="number">22</span>) <span class="comment">// 位数小于等于22位，尾数位右移</span></span><br><span class="line">        uf &gt;&gt;= <span class="number">23</span>-e;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        uf &lt;&lt;= e<span class="number">-23</span>; <span class="comment">// 尾数大于22位，尾数为左移</span></span><br><span class="line">    <span class="keyword">if</span> (s) </span><br><span class="line">        uf = ~uf + <span class="number">1</span>;<span class="comment">// 若原uf为负数，则对此处的正数uf取反加1得其相反数</span></span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-floatPower2函数"><a href="#13-floatPower2函数" class="headerlink" title="13.floatPower2函数"></a>13.floatPower2函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意：  给出一个无符号整数x，将其看作一个浮点数，返回2**x。   </p><p>思路：  先得到阶码<code>exp = x + 127</code>，然后考虑临界值：  </p><p><code>bin(x) = 0 00000000 00000000000000000000001</code>，此数是<code>2**((-126)+(-23))</code>,<br>即<code>exp = 0</code>时情况；  </p><p><code>bin(x) = 0 00000001 00000000000000000000000</code>，此数是<code>2**(-126)</code>，<br>即<code>exp = 23</code>时情况；</p><p><code>bin(x) = 0 11111111 00000000000000000000000</code> ，此数是<code>2**(128)</code>，<br>即<code>exp = 255</code>时情况。</p><p>代码一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">0x7f</span>;                          <span class="comment">// x + 127</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>) </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exp</span> &lt; <span class="number">0xff</span> ? <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span> : <span class="number">0x7f800000</span>;  <span class="comment">//0xff = 255</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> INF = <span class="number">0xff</span> &lt;&lt; <span class="number">23</span>; <span class="comment">// 阶码全1</span></span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">127</span> + x;    <span class="comment">// 得到阶码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>) <span class="comment">// 阶数小于0直接返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &gt;= <span class="number">255</span>) <span class="comment">// 阶码&gt;=255直接返回INF</span></span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> e &lt;&lt; <span class="number">23</span>;</span><br><span class="line">    <span class="comment">// 直接将阶码左移23位，尾数全0，规格化时尾数隐藏有1个1作为底数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2020/11/10/datalab-handout/datalab-handout.png" alt="result"> </p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>不愧是计算机系统的实验，实验内容和系统基础知识紧密联系，所接触到的不再是10进制数的计算，而是二进制及其反码补码，十六进制的计算，也不再仅仅是算术运算而更多的是逻辑、位的运算。由于知识储备的限制，一开始进行试验的时候实在是无从下手，思路上也受到了极大的限制，加之对于反码补码、有符号数无符号数、逻辑运算符、位运算符等等之类掌握的不深切，就觉得实验真的很难，当然本次实验的难度确实很大，实验内容也仅是datalab-handout的一部分，对其研究个八九不离十，十分有利与我对计算机系统学习，同时也要做好学习记录，以便日后回忆。  </p><p>tip：<br>  这篇博客会在后续继续完善（在自己更加明白时），目前内容仅供参考。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
            <tag> 位计算 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 实验记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
